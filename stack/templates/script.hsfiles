{-# START_FILE package.yaml #-}
{}

{-# START_FILE {{name}}.exe.hs #-}
#!/usr/bin/env stack
{-
stack
--resolver lts-8.12
--compiler ghc-8.0.2
--install-ghc
runghc
--package turtle
--package options

-}

{-# LANGUAGE NoImplicitPrelude, NoMonomorphismRestriction #-}
{-# LANGUAGE AutoDeriveTypeable, DeriveDataTypeable, DeriveGeneric,
             DeriveFunctor, DeriveFoldable, DeriveTraversable,
             StandaloneDeriving #-}
{-# LANGUAGE LambdaCase, EmptyCase, TypeOperators, PostfixOperators,
             ViewPatterns, BangPatterns,
             OverloadedStrings, OverloadedLists, 
             NamedFieldPuns, RecordWildCards, TupleSections,
             MultiWayIf, DoAndIfThenElse, EmptyDataDecls #-}
{-# LANGUAGE MultiParamTypeClasses, FlexibleContexts, FlexibleInstances,
             TypeFamilies, FunctionalDependencies,
             ScopedTypeVariables #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}

import Prelude
import Turtle
import Control.Applicative
import Options

data MainOptions = MainOptions
    { optMessage :: String
    , optQuiet :: Bool
    }

instance Options MainOptions where
    defineOptions = pure MainOptions
        <*> simpleOption "message" "Hello world!"
            "A message to show the user."
        <*> simpleOption "quiet" False
            "Whether to be quiet."

{-

chmod u+x {{name}}.exe.hs

-}

main = do                  --
main = runCommand $ \opts args -> do
  if optQuiet opts
        then return ()
        else putStrLn (optMessage opts)

  dir  <- pwd            -- DIR=$(pwd)
  time <- datefile dir   -- TIME=$(date -r $DIR)
  print time             -- echo $TIME

