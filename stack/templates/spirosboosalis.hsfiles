{-# START_FILE {{name}}.cabal #-}
name:                {{name}}
version:             0.0.0
cabal-version:       >=2.0
build-type:          Simple 
category:            Data 
synopsis:            {{synopsis}} 
description:         
 .
 TODO
 . 
 see the source of "{{module}}.Example" for an example.
 .
 transitive dependencies:
 .
 <<{{name}}.png>>

homepage:            http://github.com/{{github-username}}/{{name}}#readme
bug-reports:         http://github.com/{{github-username}}/{{name}}/issues
author:              {{author-name}}
maintainer:          {{author-email}}
copyright:           {{copyright}}
license:             BSD3
license-file:        LICENSE
stability:           provisional
tested-with:         GHC == 8.2.2

-- PVP
-- https://wiki.haskell.org/Package_versioning_policy
-- "A.B is known as the major version number, and C the minor version number."

extra-source-files:
  README.md
  stack.yaml
  .travis.yml
  HLint.hs

-- data-files:
--   data/

source-repository head
  type:     git
  location: https://github.com/{{github-username}}/{{name}}

-- make the `template` test suite dump its template-haskell splices
flag dump-splices
  default: False
  manual: True


library
 hs-source-dirs:      sources
 default-language:    Haskell2010
 ghc-options:
  -Wall
-- disable
  -fno-warn-unticked-promoted-constructors
-- enable
  -fwarn-incomplete-uni-patterns
  -fwarn-incomplete-record-updates
  -fwarn-identities
  -fwarn-missing-fields

 default-extensions: PackageImports AutoDeriveTypeable DeriveDataTypeable DeriveGeneric
                     DeriveFunctor DeriveFoldable DeriveTraversable
                     LambdaCase EmptyCase TypeOperators PostfixOperators
                     ViewPatterns BangPatterns KindSignatures
                     NamedFieldPuns RecordWildCards TupleSections
                     MultiWayIf DoAndIfThenElse EmptyDataDecls
                     MultiParamTypeClasses FlexibleContexts FlexibleInstances
                     TypeFamilies FunctionalDependencies
                     ScopedTypeVariables StandaloneDeriving

 exposed-modules:
                 {{module}}
                 {{module}}.Types
                 {{module}}.Core		
                 {{module}}.Example                
 other-modules:

                 {{module}}.Extra            
                 -- Paths_{{name}}
-- autogen-modules:
                 -- Paths_{{name}}

 build-depends:
               base >=4.7 && <5

-- mine 
             , spiros
--              , enumerate 

-- (extended) standard library 
             , deepseq
             , hashable
             , containers
             , unordered-containers
             , text 
             , bytestring
             , transformers
             , mtl

-- ekmett 
             , exceptions
             , lens

-- other packages 


executable example-{{name}}
 hs-source-dirs:      executables
 main-is:             Main.hs

 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

 build-depends:
    base
  , {{name}}


-- $ stack test documentation
test-suite documentation 
 hs-source-dirs:      tests
 main-is:             DocTests.hs
 type:                exitcode-stdio-1.0

 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

 build-depends:
    base
  , {{name}}
  , doctest


-- $ stack test unit
test-suite unit
 hs-source-dirs:      tests
 main-is:             UnitTests.hs
 type:                exitcode-stdio-1.0

 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

 other-modules:
  {{module}}.Test

 build-depends:
    base
  , {{name}} 
  , tasty
  

-- $ stack test properties 
test-suite properties 
 hs-source-dirs:      tests
 main-is:             PropertyTests.hs
 type:                exitcode-stdio-1.0

 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

 other-modules:
  {{module}}.Property 

 build-depends:
    base
  , {{name}}
  , QuickCheck 
  , tasty
  , tasty-quickcheck


-- $ stack test templates 
-- Template Haskell 
test-suite templates
  type: exitcode-stdio-1.0
  main-is: TemplateHaskellTests.hs
  ghc-options: -Wall -threaded
  hs-source-dirs: tests

  if flag(dump-splices)
    ghc-options: -ddump-splices
    
  build-depends:
      base
    , {{name}}
  

-- $ stack bench 
benchmark everything 
 hs-source-dirs:      benchmarks
 main-is:             Bench.hs
 type:                exitcode-stdio-1.0

 default-language: Haskell2010
 ghc-options:      -Wall -O2 -threaded -fdicts-cheap -funbox-strict-fields
 
 build-depends:
    base
  , {{name}}
  , criterion
  , deepseq


-- originally generated with this command:  
-- 
-- $ stack new {{name}} https://raw.githubusercontent.com/sboosali/configuration/m
aster/stack/templates/spirosboosalis.hsfiles -p "module:{{module}}" -p "filepath:{{filepath}}" -p "synopsis:{{synopsis}}" 
-- 
-- given this configuration in `.stack/config.yaml`: 
-- 
-- templates:
--   params:
--     author-email:    {{author-email}} 
--     author-name:     {{author-name}} 
--     github-username: {{github-username}} 
--     copyright:       {{copyright}}  
--     synopsis:        TODO 

{-# START_FILE cabal.config #-}
# executable-profiling: True
# library-profiling: True


{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain


{-# START_FILE stack.yaml #-}
resolver: nightly-2017-12-17 

nix:
  enable: false 
  pure:   true
  packages:
  - zlib

packages:
- ./

# - location:
#     git:    https://github.com/sboosali/spiros
#     commit: 0c5f3584e73ae3e4c00b0a142d2024c241ac3032
#   extra-dep: true
#   subdirs: [.] 

extra-deps: 
- spiros-0.0.0


{-# START_FILE sources/{{filepath}}.hs #-}
module {{module}}
 ( module {{module}}.Types
 , module {{module}}.Core
 ) where
import {{module}}.Types
import {{module}}.Core


{-# START_FILE sources/{{filepath}}/Types.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
module {{module}}.Types where
-- import {{module}}.Extra


{-# START_FILE sources/{{filepath}}/Core.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
module {{module}}.Core where
import {{module}}.Extra
import {{module}}.Types

import Prelude.Spiros


{-# START_FILE sources/{{filepath}}/Example.hs #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-} -- to test inference
module {{module}}.Example where
-- import {{module}}
import System.Environment

{-|
@
stack build && stack exec -- example-{{name}}
@
-}
main :: IO ()
main = do
 arguments <- getArgs >>= \case
  [s] -> return (s)
  _ -> return ("")
 mainWith arguments

mainWith s = do
 putStrLn s
 putStrLn "({{module}}.Example...)"


{-# START_FILE sources/{{filepath}}/Extra.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
module {{module}}.Extra
 ( module {{module}}.Extra
 , module Prelude.Spiros
 ) where

import Prelude.Spiros


{-# START_FILE tests/{{filepath}}/Test.hs #-}
module {{module}}.Test where
import {{module}}() 


{-# START_FILE tests/{{filepath}}/Property.hs #-}
module {{module}}.Property where
import {{module}}


{-# START_FILE tests/DocTest.hs #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
import Test.DocTest

main = doctest
 [ "sources/{{module}}.hs"
 ]


{-# START_FILE tests/UnitTests.hs #-}
-- {-# OPTIONS_GHC -F -pgmF hspec-discover #-}
import {{module}}.Test

main = do
 print "[{{module}}.Test]"


{-# START_FILE tests/PropertyTests.hs #-}
import {{module}}.Property() 

main = do
 print "[{{module}}.Property]"



{-# START_FILE tests/HLintTest.hs #-}
-- (by ekmett via lens)
-- This module runs HLint on the lens source tree.
-----------------------------------------------------------------------------
module Main where

import Control.Monad
import Language.Haskell.HLint
import System.Environment
import System.Exit

main :: IO ()
main = do
    args <- getArgs
    hints <- hlint $ ["src", "--cpp-define=HLINT", "--cpp-ansi"] ++ args
    unless (null hints) exitFailure
    

{-# START_FILE executables/Main.hs #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
import qualified {{module}}.Example
main = {{module}}.Example.main

{-# START_FILE benchmarks/Bench.hs #-}
import {{module}}
import Criterion.Main

main = defaultMain [
  bgroup "{{module}}"
    [ bench "1" $ nf   length [1..1000::Int]
    , bench "2" $ whnf length [1..1000::Int]
    ]
  ]


{-# START_FILE .travis.yml #-}
# https://docs.travis-ci.com/user/languages/haskell

#   - 8.0
ghc:
  - 7.10
  - 7.8

# install: stack install

# script: stack test

notifications:
  email:
    - {{author-email}}

{-# START_FILE HLint.hs #-}
{-# LANGUAGE PackageImports, TemplateHaskell #-}
import "hint" HLint.Default
import "hint" HLint.Dollar
import "hint" HLint.Generalise
ignore "Use unwords"
ignore "Use map once"
ignore "Use =<<"
ignore "Functor law"


{-# START_FILE .gitignore #-}
# my
ignore/ 
temporary/ 
TODO

# Haskell
cabal.project.local
dist-newstyle/
dist/
cabal-dev
*.o
*.hi
*.chi
*.chs.h
.virtualenv
.hsenv
ghcid.txt
.cabal-sandbox/
cabal.sandbox.config
cabal.config
report.html
.stack-work/

# nix
result
result/

# Emacs
\#*
*~
.#*
\#*\#
*.log
TAGS
.projectile

# OS X
.DS_Store


{-# START_FILE LICENSE #-}
Copyright {{author-name}} (c) 2017

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



{-# START_FILE appveyor.yml #-}

version: 0.0.0.{build}

shallow_clone: true

cache:
  - "%APPDATA%\\stack"
  - .stack-work

build_script:
  - choco install haskell-stack
  - stack --no-terminal setup > NUL
  - stack --no-terminal exec pacman -- -Syu --force --noconfirm --noprogressbar
  - stack --no-terminal exec pacman -- -Syu --force --noconfirm --noprogressbar
  - stack --no-terminal exec pacman -- -Syu --force --noconfirm --noprogressbar
  - stack --no-terminal build --haddock


{-# START_FILE CHANGELOG.md #-}

0.0.0 
----

* nothing 


{-# START_FILE README.md #-}
[![Build Status](https://secure.travis-ci.org/{{github-username}}/{{name}}.svg)](http://travis-ci.org/{{github-username}}/{{name}})
[![Hackage](https://img.shields.io/hackage/v/{{name}}.svg)](https://hackage.haskell.org/package/{{name}})

# {{name}}

{{synopsis}} 
