{-# START_FILE {{name}}.cabal #-}
name:                {{name}}
version:             0.0.0
cabal-version:       >=1.24

----------------------------------------

build-type:          Simple 
category:            Data 
synopsis:            {{synopsis}} 
description:         
 .
 TODO
 . 
 See the source of "{{module}}.Example" for an example.
 .
 Quickstart:
 .
 @
 import {{module}}
 \-- TODO
 @
 .
 Transitive dependencies:
 .
 .
 <<{{name}}-dependencies.png>>
 .

homepage:            http://github.com/{{github-username}}/{{name}}#readme
bug-reports:         http://github.com/{{github-username}}/{{name}}/issues
author:              {{author-name}}
maintainer:          {{author-email}}
copyright:           {{copyright}}
license:             BSD3
license-file:        LICENSE
stability:           provisional
tested-with:
  GHC == 8.2.2
-- GHC == 8.0.2

-- PVP
-- https://wiki.haskell.org/Package_versioning_policy
-- "A.B is known as the major version number, and C the minor version number."

----------------------------------------

extra-source-files:
  README.md
  stack.yaml
  .travis.yml
  HLint.hs

-- data-files:
--   data/

source-repository head
  type:     git
  location: https://github.com/{{github-username}}/{{name}}

----------------------------------------
-- FLAGS

-- You can disable the doctests test suite with -f-test-doctests.
flag test-docs
  default:     False
  description: Run the doctests (with the eponymous `doctest`), called the `test documentation` unit (in this cabal file). 
  manual:      True

-- You can disable the hunit test suite with -f-test-hunit. 
flag test-unit
  default:     False
  description: Run the unit tests, called the `test unit` unit (in this cabal file).  
  manual:      True

flag test-properties
  default:     False
  description: Run the property tests (i.e. QuickCheck), called the `test properties` unit (in this cabal file).  
  manual:      True

flag test-macros
  default: False
  description: Run any macro tests (i.e. TemplateHaskell), called the `test templates` unit (in this cabal file).  
  manual:  True

flag bench-speed
  default:     False
  description: Execute the benchmarks (which may take a long time).
  manual:      True

flag dump-splices
  default:     False
  description: Make the `template` test suite dump its template-haskell splices.
  manual:      True

----------------------------------------
-- LIBRARY

library
 hs-source-dirs:      sources

 ghc-options:
  -Wall
-- disable
  -fno-warn-unticked-promoted-constructors
-- enable
  -fwarn-incomplete-uni-patterns
  -fwarn-incomplete-record-updates
  -fwarn-identities
  -fwarn-missing-fields

 default-language:   Haskell2010
 default-extensions: PackageImports AutoDeriveTypeable DeriveDataTypeable DeriveGeneric
                     DeriveFunctor DeriveFoldable DeriveTraversable
                     LambdaCase EmptyCase TypeOperators PostfixOperators
                     ViewPatterns BangPatterns KindSignatures
                     NamedFieldPuns RecordWildCards TupleSections
                     MultiWayIf DoAndIfThenElse EmptyDataDecls
                     MultiParamTypeClasses FlexibleContexts FlexibleInstances
                     TypeFamilies FunctionalDependencies
                     ScopedTypeVariables StandaloneDeriving

 exposed-modules:
                 {{module}}
                 {{module}}.Types
                 {{module}}.Core		
                 {{module}}.Example                
 other-modules:

                 {{module}}.Extra            
                 -- Paths_{{name}}
-- autogen-modules:
                 -- Paths_{{name}}

 build-depends:
               base >=4.7 && <5

-- mine 
             , spiros
             -- , enumerate 

-- (extended) standard library 
             , deepseq
             , hashable
             , containers
             , unordered-containers
             , text 
             , bytestring
             , transformers
             , mtl

-- ekmett 
             , exceptions
             , lens

-- other packages 

----------------------------------------
-- EXECUTABLES

executable example-{{name}}
 hs-source-dirs:      executables
 main-is:             Main.hs

 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

 build-depends:
    base
  , {{name}}

----------------------------------------
-- TESTS


-- $ stack test unit
test-suite unit
 hs-source-dirs:      tests
 main-is:             UnitTests.hs
 type:                exitcode-stdio-1.0

 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

 other-modules:
  {{module}}.Test

 if !flag(test-unit)
    buildable: False
 else
    build-depends:
       base
     , {{name}} 
     , tasty
  

-- $ stack test properties 
test-suite properties 
 hs-source-dirs:      tests
 main-is:             PropertyTests.hs

 type:                exitcode-stdio-1.0
 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

 other-modules:
  {{module}}.Property 

 build-depends:
    base
  , {{name}}
  , QuickCheck 
  , tasty
  , tasty-quickcheck
  , hedgehog
  , tasty-hedgehog


-- $ stack test documentation
test-suite documentation 

 hs-source-dirs:      tests
 main-is:             DocTests.hs
 type:                exitcode-stdio-1.0

 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

 if (!flag(test-docs) || impl(ghcjs))
    buildable: False
    -- (`ghcjsi` just doesn't work? or `doctest` needs the GHC API?) else
    build-depends:
       base
     , {{name}}
     , doctest


-- $ stack test templates 
-- Template Haskell 
-- Verify that Template Haskell expansion works
test-suite templates
  hs-source-dirs:      tests
  main-is:             TemplateHaskellTests.hs

  type:             exitcode-stdio-1.0
  default-language: Haskell2010
  ghc-options:      -Wall -threaded

  if flag(dump-splices)
    ghc-options: -ddump-splices

  if !flag(test-macros)
     buildable: False
  else
     build-depends:
         base
       , {{name}}
       , lens


----------------------------------------
-- BENCHMARKS

-- $ stack bench 
benchmark speed
 hs-source-dirs:      benchmarks
 main-is:             Bench.hs

 type:             exitcode-stdio-1.0
 default-language: Haskell2010
 ghc-options:
      -Wall -threaded
       -O2 -fdicts-cheap -funbox-strict-fields

 if !flag(bench-speed)
    buildable: False
 else
    build-depends:
       base
     , {{name}}
     , criterion
     , deepseq


----------------------------------------
-- NOTES

-- originally generated with this command:  
-- 
-- $ stack new {{name}} https://raw.githubusercontent.com/sboosali/configuration/master/stack/templates/spirosboosalis.hsfiles -p "module:{{module}}" -p "filepath:{{filepath}}"
-- 
-- given this configuration in `~/.stack/config.yaml`: 
-- 
-- templates:
--   params:
--     author-email:    {{author-email}} 
--     author-name:     {{author-name}} 
--     github-username: {{github-username}} 
--     copyright:       {{copyright}}  
--     synopsis:        TODO 

----------------------------------------

{-# START_FILE default.nix #-}
import ./{{name}}-default.nix 

{-# START_FILE shell.nix #-}
import ./{{name}}-shell.nix 

{-# START_FILE verify.sh #-}
#!/bin/sh
set -e
./configure.sh
./build.sh

./test.sh     || true
./document.sh || true
./bench.sh    || true
./run.sh      || true

# cabal test    || true
# cabal bench   || true
# cabal haddock || true

{-# START_FILE configure.sh #-}
#!/bin/sh
cabal configure --enable-tests --enable-benchmarks

{-# START_FILE environment.sh #-}
#!/bin/bash
NIX_SHELL_FILE=shell-{{name}}.nix
NIX_SHELL_OPTIONS=(--arg doBenchmark true)
nix-shell "$NIX_SHELL_FILE" "${NIX_SHELL_OPTIONS[@]}"

{-# START_FILE provision.sh #-}
#!/bin/bash
SHELL_FILE={{name}}-shell.nix
nix-shell "$SHELL_FILE" --arg doBenchmark true --run "./configure.sh"

{-# START_FILE reconfigure.sh #-}
#!/bin/bash
set -e
########################################

cabal2nix .         > "{{name}}-default.nix"
cabal2nix . --shell > "{{name}}-shell.nix"

./provision.sh

########################################
#
# SHELL_FILE=shell-{{name}}.nix
# cabal2nix . --shell > "$SHELL_FILE"
#
# if [ ! -f "$SHELL_FILE" ]; then 
#   # don't overwrite if it already exists
#   cabal2nix . --shell > "$SHELL_FILE" 
# fi
#

{-# START_FILE build.sh #-}
#!/bin/sh
cabal build

{-# START_FILE run.sh #-}
#!/bin/sh
cabal build
cabal run example-{{name}}

{-# START_FILE test.sh #-}
#!/bin/sh
cabal test

{-# START_FILE bench.sh #-}
#!/bin/sh
cabal bench

{-# START_FILE document.sh #-}
#!/bin/sh
cabal haddock --haddock-option="--hyperlinked-source"
# not `cabal haddock --hyperlink-source` lol

{-# START_FILE interpreter.sh #-}
#!/bin/sh
cabal repl

{-# START_FILE watch.sh #-}
#!/bin/bash
ghcid --command 'nix-shell --command "cabal repl"'

{-# START_FILE build.bat #-}
cabal build

{-# START_FILE cabal.config #-}
-- hyperlink-source: True
-- profiling: True
-- library-profiling: True

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE cabal.project #-}
-- http://blog.ezyang.com/2016/05/announcing-cabal-new-build-nix-style-local-builds/

packages:
  ./

{-# START_FILE stack-nix.yaml #-}
resolver: nightly-2018-01-22 

nix:
  enable: true
  pure:   true
  packages:
  - zlib

packages:
- ./

# - location:
#     git:    https://github.com/sboosali/spiros
#     commit: 0c5f3584e73ae3e4c00b0a142d2024c241ac3032
#   extra-dep: true
#   subdirs: [.] 

extra-deps: 
- spiros-0.0.0


{-# START_FILE sources/{{filepath}}.hs #-}

{-| 

Examples prefixed by @>>> @ are @doctest@'ed. 

>>> stub
"stub"

-}
module {{module}}
 ( module {{module}}.Types
 , module {{module}}.Core
 ) where
import {{module}}.Types
import {{module}}.Core


{-# START_FILE sources/{{filepath}}/Types.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}

{-| The core types. 

This module mostly defines types 
(i.e. @data@, @newtype@, @type@, @class@, @instance@) 
and whatever values are necessary for instances.

-}
module {{module}}.Types where
import {{module}}.Extra()


{-# START_FILE sources/{{filepath}}/Core.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}

{-| The core definitions. 

-}
module {{module}}.Core where
import {{module}}.Extra()
import {{module}}.Types()

import Prelude.Spiros

stub = "stub"


{-# START_FILE sources/{{filepath}}/Example.hs #-}

{-# OPTIONS_GHC -fno-warn-missing-signatures #-} -- to test inference

{-| This module provides an example program. 
Please read the source too <https://hackage.haskell.org/package/{{name}}/docs/src/{{module}}-Example.html (direct Hackage link)>. 

Being a @library@ module, it's typechecked with the package, 
and thus should always build.

Only public interfaces are imported (i.e. no @.Internal@s),
and there are minimal other dependencies. 

'main' is executed by the @{{name}}-example@ executable. 

-}
module {{module}}.Example where

import {{module}}()

import System.Environment

{-|

Running:

@
cabal build && cabal run example-{{name}}
@

@
stack build && stack exec -- example-{{name}}
@

-}
main :: IO ()
main = do
 arguments <- getArgs >>= \case
  [s] -> return (s)
  _ -> return ("")
 mainWith arguments

mainWith s = do
 putStrLn s
 putStrLn "({{module}}.Example...)"


{-# START_FILE sources/{{filepath}}/Extra.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}

{-|

-}
module {{module}}.Extra
 ( module {{module}}.Extra
 , module Prelude.Spiros
 ) where

import Prelude.Spiros()


{-# START_FILE tests/{{filepath}}/Test.hs #-}
module {{module}}.Test where
import {{module}}() 


{-# START_FILE tests/{{filepath}}/Property.hs #-}
module {{module}}.Property where
import {{module}}


{-# START_FILE tests/DocTests.hs #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
import Test.DocTest

main :: IO ()
main = doctest

   -- every module in this directory (i.e. `hs-source-dirs`)
 [ "sources/"

   -- all language extensions enabled by default (i.e. `default-extensions`)
 , "-XPackageImports"
 , "-XAutoDeriveTypeable"
 , "-XDeriveDataTypeable"
 , "-XDeriveGeneric"
 , "-XDeriveFunctor"
 , "-XDeriveFoldable"
 , "-XDeriveTraversable"
 , "-XLambdaCase"
 , "-XEmptyCase"
 , "-XTypeOperators"
 , "-XPostfixOperators"
 , "-XViewPatterns"
 , "-XBangPatterns"
 , "-XKindSignatures"
 , "-XNamedFieldPuns"
 , "-XRecordWildCards"
 , "-XTupleSections"
 , "-XMultiWayIf"
 , "-XDoAndIfThenElse"
 , "-XEmptyDataDecls"
 , "-XMultiParamTypeClasses"
 , "-XFlexibleContexts"
 , "-XFlexibleInstances"
 , "-XTypeFamilies"
 , "-XFunctionalDependencies"
 , "-XScopedTypeVariables"
 , "-XStandaloneDeriving"
 ]

 -- [ "sources/{{filepath}}/Extra.hs"
 -- , "sources/{{filepath}}/Types.hs"
 -- , "sources/{{filepath}}/Core.hs"
 -- , "sources/{{filepath}}.hs"
 -- , "sources/{{filepath}}/Example.hs"
 -- ]


{-# START_FILE tests/UnitTests.hs #-}
-- {-# OPTIONS_GHC -F -pgmF hspec-discover #-}
import {{module}}.Test

main :: IO ()
main = do
 print "[{{module}}.Test]"


{-# START_FILE tests/PropertyTests.hs #-}
import {{module}}.Property() 

main :: IO ()
main = do
 print "[{{module}}.Property]"


{-# START_FILE tests/TemplateHaskellTests.hs #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE Rank2Types #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE UndecidableInstances #-}
{-# LANGUAGE CPP #-}

module Main where

import Control.Lens

-- NOTE below we mock out any TemplateHaskell tests with `lens`'s
-- if your package doesn't provide TemplateHaskell-macros,
-- remove this file and the stanza

data Bar a b c = Bar { _baz :: (a, b) }
makeLenses ''Bar

checkBaz :: Iso (Bar a b c) (Bar a' b' c') (a, b) (a', b')
checkBaz = baz

main :: IO ()
main = putStrLn "[tests/TemplateHaskellTests.hs] ok"


{-# START_FILE tests/HLintTest.hs #-}
-- (by ekmett via lens)
-- This module runs HLint on the source tree.

module Main where

import Control.Monad
import Language.Haskell.HLint
import System.Environment
import System.Exit

{-|

Usage:

you can hide code from hlint, 
by using cpp in the source:

    #ifndef HLINT
    ...
    #endif

-}
main :: IO ()
main = do
    args <- getArgs
    hints <- hlint $ ["src", "--cpp-define=HLINT", "--cpp-ansi"] ++ args
    unless (null hints) exitFailure
    

{-# START_FILE executables/Main.hs #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
import qualified {{module}}.Example
main = {{module}}.Example.main

{-# START_FILE benchmarks/Bench.hs #-}
import {{module}}
import Criterion.Main

main :: IO ()
main = defaultMain [
  bgroup "{{module}}"
    [ bench "1" $ nf   length [1..1000::Int]
    , bench "2" $ whnf length [1..1000::Int]
    ]
  ]


{-# START_FILE .travis.yml #-}
# https://docs.travis-ci.com/user/languages/haskell

#   - 8.0
ghc:
  - 7.10
  - 7.8

# install: stack install

# script: stack test

notifications:
  email:
    - {{author-email}}

{-# START_FILE HLint.hs #-}
{-# LANGUAGE PackageImports, TemplateHaskell #-}
import "hint" HLint.Default
import "hint" HLint.Dollar
import "hint" HLint.Generalise
ignore "Use unwords"
ignore "Use map once"
ignore "Use =<<"
ignore "Functor law"


{-# START_FILE .gitignore #-}
# my
ignore/ 
temporary/ 
TODO

# Haskell
cabal.project.local
dist-newstyle/
dist/
cabal-dev
*.o
*.hi
*.chi
*.chs.h
.virtualenv
.hsenv
ghcid.txt
.cabal-sandbox/
cabal.sandbox.config
cabal.config
report.html
.stack-work/

# nix
result
result/

# Emacs
\#*
*~
.#*
\#*\#
*.log
TAGS
.projectile

# OS X
.DS_Store


{-# START_FILE LICENSE #-}
Copyright {{author-name}} (c) 2017

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



{-# START_FILE appveyor.yml #-}

version: 0.0.0.{build}

shallow_clone: true

cache:
  - "%APPDATA%\\stack"
  - .stack-work

build_script:
  - choco install haskell-stack
  - stack --no-terminal setup > NUL
  - stack --no-terminal exec pacman -- -Syu --force --noconfirm --noprogressbar
  - stack --no-terminal exec pacman -- -Syu --force --noconfirm --noprogressbar
  - stack --no-terminal exec pacman -- -Syu --force --noconfirm --noprogressbar
  - stack --no-terminal build --haddock


{-# START_FILE CHANGELOG.md #-}

0.0.0 
----

* nothing 


{-# START_FILE NOTES.md #-}

========================================

========================================

The initial repository structure was automatically generated by:

```
# New project scaffolding
# 
# requires:
# nix, cabal2nix, sed (/stdenv), stack, cabal-install, hscolour,
#
# NOTES
# function definition is subshell ("(" not "{")
# 
# '''You may directly use a subshell as your function definition and set it to exit immediately with set -e. This would limit the scope of set -e to the function subshell only and would later avoid switching between set +e and set -e.
# In addition, you can use a variable assignment in the if test and then echo the result in an additional else statement.'''
# https://stackoverflow.com/questions/4072984/set-e-in-a-function
# 
function new-haskell-project () (
    set -e

    PACKAGE="$1"
    MODULE="$2"
    _FILEPATH="$3"

    MESSAGE='h-new PACKAGE MODULE FILEPATH''\n''e.g. h-new workflow-core Workflow.Core Workflow/Core'

    if [ "$#" -ne 3 ]; then
        echo -e "$MESSAGE"
	return 1
        # NOTE `return` v `exit`?
        # `return`, in the subshell-defined-function, still seems to work.
    fi

    LOCAL_TEMPLATE=~/.stack/templates/spirosboosalis.hsfiles
    REMOTE_TEMPLATE='https://raw.githubusercontent.com/sboosali/config/master/stack/templates/spirosboosalis.hsfiles'
    if [ -f "$LOCAL_TEMPLATE" ]; then
	TEMPLATE="$LOCAL_TEMPLATE"
    else
	TEMPLATE="$REMOTE_TEMPLATE"
    fi

    echo
    echo "[TEMPLATE]"
    echo "$TEMPLATE"
    echo

    stack new "$PACKAGE" "$TEMPLATE" -p module:"$MODULE" -p filepath:"$_FILEPATH" || true # ignore failure
    # -p synopsis:"$SYNOPSIS"

    if ! cd "$PACKAGE"; then
        echo -e "$MESSAGE"
	return 1
    fi

    # patch documentation
    # e.g. "Cards.Common-Example.html" -> "Cards-Common-Example.html"
    STRING_FROM="$MODULE"-Example.html
    STRING_INTO="$(echo "$MODULE"-Example | sed 's/\./-/g')".html
    sed -i  s/"$STRING_FROM"/"$STRING_INTO"/g  sources/"$_FILEPATH"/Example.hs
    sed -i  s/"$STRING_FROM"/"$STRING_INTO"/g  README.md

    # patch cabal file
    # e.g. "Paths_reflex-vinyl" -> "Paths_reflex_vinyl"
    STRING_FROM_2="Paths_$PACKAGE"
    STRING_INTO_2="$(echo "$STRING_FROM_2" | sed 's/-/_/g')"
    sed -i  s/"$STRING_FROM_2"/"$STRING_INTO_2"/g "$PACKAGE.cabal"

    NIX_DEFAULT_FILE="$PACKAGE-default.nix"
    cabal2nix .         > "$NIX_DEFAULT_FILE"

    NIX_SHELL_FILE="$PACKAGE-shell.nix"
    cabal2nix . --shell > "$NIX_SHELL_FILE" 

    # SC2035
    chmod 700 ./*.sh

    echo
    echo "========================================"
    echo "[Building Everything...]"
    echo "========================================"
    echo

    # try to open a tab in the default browser to create a GitHub repository,
    # during the build (which should take a minute)
    GITHUB_URL=https://github.com/new
    xdg-open "$GITHUB_URL" 2>/dev/null || open "$GITHUB_URL" 2>/dev/null || true # ignore failure

    nix-shell "$NIX_SHELL_FILE" --arg doBenchmark true --arg doTest true --run 'cabal configure --enable-tests --enable-benchmarks'

    # nix-shell "$SHELL_FILE" --arg doBenchmark true 
    cabal build
    cabal run "example-$PACKAGE"
    cabal test || true # ignore failure
    cabal bench || true # ignore failure
    cabal haddock --haddock-option="--hyperlinked-source" || true # ignore failure

    # (nix-shell && cabal build && cabal run example-$PACKAGE)

    echo
    echo "========================================"
    echo "[Initializing Repository...]"
    echo "========================================"
    echo
    git init
    git add .
    git commit -m '1st'
    git remote add origin "git@github.com:sboosali/$PACKAGE".git
    git push -u origin master
)
```
========================================


{-# START_FILE README.md #-}
[![Build Status](https://secure.travis-ci.org/{{github-username}}/{{name}}.svg)](http://travis-ci.org/{{github-username}}/{{name}})
[![Hackage](https://img.shields.io/hackage/v/{{name}}.svg)](https://hackage.haskell.org/package/{{name}})

# {{name}}

{{synopsis}} 

## Example

```
import {{module}}

-- TODO
```

## Links

[Hackage](https://hackage.haskell.org/package/{{name}})

[Example module source](https://hackage.haskell.org/package/{{name}}/docs/src/{{module}}-Example.html). 

## Development

### Nix

These nix files:

* `{{name}}-default.nix` 
* `{{name}}-shell.nix` 

were automatically created by the `cabal2nix` command, and can be regenerated with `./reconfigure.sh`. They shouldn't be edited manually. 

While the other nix files:

* `default.nix` 
* `shell.nix` 

import their respecitve autogen'd files, but can (and should) be edited manually when necessary. 

If, you've forked this and have rewritten your own custom nix file for development (e.g. you're on OSX, or you need an older compiler version), please suffix it with that environment (e.g. `osx-shell.nix` or `ghc-7-10-03.nix`), and submit a pull request. Ditto for `stack.yaml` files. 


{-# START_FILE shell.nix #-}

{ nixpkgs ? import <nixpkgs> {}

, compiler ? "default"

, withProfiling ? false
, withHoogle    ? false 

, doTest        ? false
, doBenchmark   ? false

, development   ? true
}:

/* Usage:

  nix-shell
  cabal configure 
  cabal build
  cabal run

*/

########################################
let

### "IMPORTS"

inherit (nixpkgs) pkgs;
inherit (pkgs)    fetchFromGitHub;

lib = import "${nixpkgs.path}/pkgs/development/haskell-modules/lib.nix" { pkgs = nixpkgs; };
haskell = nixpkgs.haskell.lib;
#haskell = lib;
hs = pkgs.haskell.lib; #TODO rm

in
########################################
let

### UTILITIES

skipTests       = haskell.dontCheck; 
dropUpperBounds = haskell.doJailbreak;

cabal2nixResult = options: src:
  nixpkgs.runCommand "cabal2nixResult" {
    buildCommand = ''
      cabal2nix ${options} file://"${src}" >"$out"
    '';
    buildInputs = with nixpkgs; [
      cabal2nix
    ];
  } "";

in
########################################
let

### SOURCE OVERRIDES

# "megarepos" which have multiple packages as subdirectories.
repositories = {

  reflex-dom = fetchFromGitHub {
    owner           = "reflex-frp";
    repo            = "reflex-dom"; 
    rev             = "212dca4b7ff323dca423f2dd934341bdee7ea2c5";
    sha256          = "0wv8xwr4bv2zb8qz3kf7nq2ixjg2hmyccxppgpwis3wmjai89frk";
  };

};

# 
sources = {

  reflex = fetchFromGitHub {
    owner           = "reflex-frp";
    repo            = "reflex";
    rev             = "8e0177ff28c25436452dba1222cbf8d1a20424fd";
    fetchSubmodules = true;
    sha256          = "1f0xhwq4wvf5c6w8qhvpcn30jaxxq29s2x3iy8bml3a65fpvj0sh";
  };

# PROBLEM
# Warning:
#     This package indirectly depends on multiple versions of the same package. This is very likely to cause a compile failure.
#       package haskell-src-meta (haskell-src-meta-0.8.0.1-1HfhwjlpuugEHqUXKk8ROg) requires haskell-src-exts-1.19.1-GkJUFo8Rp3b1KlAdoTXU6c
#       package reflex (reflex-0.5) requires haskell-src-exts-1.20.1-835K5nW7Qg0K3DUFrUYhiW
# 
# SOLUTION
# -f-use-template-haskell 
#   if flag(use-template-haskell)
#     cpp-options: -DUSE_TEMPLATE_HASKELL
#     build-depends:
#       dependent-sum >= 0.3 && < 0.5,
#       haskell-src-exts >= 1.16 && < 1.21,
#       haskell-src-meta >= 0.6 && < 0.9,
#       template-haskell >= 2.9 && < 2.13
#     exposed-modules:
#       Reflex.Dynamic.TH
#     other-extensions: TemplateHaskell

  # TODO `subdir ? null`
  reflex-dom = fetchFromGitHub {
    owner           = "reflex-frp";
    repo            = "reflex-dom"; 
    rev             = "212dca4b7ff323dca423f2dd934341bdee7ea2c5";
    #fetchSubmodules = true;
    sha256          = "0wv8xwr4bv2zb8qz3kf7nq2ixjg2hmyccxppgpwis3wmjai89frk";
  };

#   # TODO `subdir ? null`
#   reflex-dom = fetchFromGitHub {
#     owner           = "reflex-frp";
#     repo            = "reflex-dom/reflex-dom"; # lol
#     rev             = "212dca4b7ff323dca423f2dd934341bdee7ea2c5";
# #    fetchSubmodules = true;
#     sha256          = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
#   };

    # This is where to put the output from nix-prefetch-git
    #
    # This is based on the results o
    #   nix-prefetch-git http://github.com/ekmett/mtl
    #
    # For general git fetching:
    #
    # mtl = fetchgit {
    #   url = "http://github.com/ekmett/mtl";
    #   rev = "f75228f7a750a74f2ffd75bfbf7239d1525a87fe";
    #   sha256= "032s8g8j4djx7y3f8ryfmg6rwsmxhzxha2qh1fj15hr8wksvz42a";
    # };
    #
    # Or, more efficient for github repos:
    #
    # mtl = fetchFromGitHub {
    #   owner = "ekmett";
    #   repo = "mtl";
    #   rev = "f75228f7a750a74f2ffd75bfbf7239d1525a87fe";
    #   sha256= "032s8g8j4djx7y3f8ryfmg6rwsmxhzxha2qh1fj15hr8wksvz42a";
    # };
};

in
########################################
let

### COMPILERS

haskellPackagesWithCompiler = 
  if compiler == "default"
  then pkgs.haskellPackages
  else pkgs.haskell.packages.${compiler};

haskellPackagesWithProfiling = 
  if withProfiling
  then haskellPackagesWithCompiler.override {
         overrides = self: super: {
           mkDerivation = args: super.mkDerivation (args // { enableLibraryProfiling = true; });
         };
       }
  else haskellPackagesWithCompiler;
                 
haskellPackagesWithHoogle =
  if withHoogle
  then haskellPackagesWithProfiling.override {
         overrides = self: super: {
           ghc = super.ghc // { withPackages = super.ghc.withHoogle; };
           ghcWithPackages = self.ghc.withPackages;
         };
       }
  else haskellPackagesWithProfiling;

in

########################################
### Haskell Dependencies...
let

/*

NOTES

* `local` / `github`: 
   They call `import` directly, thus those directories require a `default.nix`
* `cabal2nix` / `hackage` / `github2nix`: 
   They call `cabal2nix`, which generates the `default.nix`, so they don't require the given directory to be a valid `nix` package. 

*/
myHaskellOverlaysWith = self: super: let
#myHaskellOverlaysWith = pkgs: self: super: let

 local      = path:
              self.callPackage path; 

 github     = o:
              self.callPackage (pkgs.fetchFromGitHub o); 

             # o ::
             #      { owner           :: String
             #        repo            :: String
             #        rev             :: String
             #        fetchSubmodules :: Bool
             #        sha256          :: String
             #      } 

 cabal2nix  = name: source: 
              self.callCabal2nix name source;

 hackage    = name: version:
              self.callHackage name version;

 github2nix = o:
              cabal2nix o.repo (pkgs.fetchFromGitHub o); 

 # override the package without overriding any dependencies
 local_      = path:           local      path         {};
 github_     = o:              github     o            {};
 cabal2nix_  = name: source:   cabal2nix  name source  {};
 hackage_    = name: version:  hackage    name version {};
 github2nix_ = o:              github2nix o            {};

 in

 {
   ########################################
   # Add Haskell Packages Below           #
   ######################################## 

    spiros = github2nix_ {
      owner  = "sboosali";
      repo   = "spiros";
      rev    = "f6c86509cfa1b198c5deb4b89b3dadf6184ea1d0"; 
      sha256 = "0bvxgp1mvlpwzr9qdpjs20qs4i813wnhrsl3nq25r8v68x6fblhk";
    };
      # NOTE
      # latest needs ghc-8.2.2
      # rev "2b7517f27242863ba153bc045dd269b348df05aa" 

 /* 

  # You can use `callHackage` and `callCabal2nix` 
  # to bump package versions or build them from GitHub. 
  # e.g.

    spiros = self.spiros_loose;

    spiros_loose   = skipTests (dropUpperBounds self.spiros_github);
    spiros_local   = local ../spiros {
    };
    spiros_hackage = hackage "spiros" "0.0.0" {
    };
    spiros_github  = github2nix {
      owner  = "sboosali";
      repo   = "spiros";
      rev    = "f6c86509cfa1b198c5deb4b89b3dadf6184ea1d0"; 
      # "2b7517f27242863ba153bc045dd269b348df05aa" 
      # latest needs ghc-8.2.2
      sha256 = 
         "0bvxgp1mvlpwzr9qdpjs20qs4i813wnhrsl3nq25r8v68x6fblhk";
    } {
    };
 */

};

in
########################################
let

### OTHER OVERRIDES
 
modifiedHaskellPackages = haskellPackagesWithHoogle.override {
  overrides = self: super: {


     # reflex     =
     #   self.callPackage (cabal2nixResult "-f-use-template-haskell" sources.reflex) {
     #  };

     # #NOTE `reflex-dom` and `reflex-dom-core` are in the same github repo, called `reflex-dom`
     # reflex-dom-core =
     #   self.callPackage (cabal2nixResult "--subpath reflex-dom-core" sources.reflex-dom) {
     #     inherit (self) reflex;
     #   };

     # reflex-dom =
     #   self.callPackage (cabal2nixResult "--subpath reflex-dom -f-use-warp -fbuild-examples" sources.reflex-dom) {
     #     inherit (self) reflex reflex-dom-core;
     #   };

     # jsaddle-warp =
     #   hs.dontCheck super.jsaddle-warp;
     #   #
     #   # Setup: Encountered missing dependencies:
     #   # doctest >=0.10.1 && <0.12, websockets >=0.9.5.0 && <0.11

     # websockets = 
     #  self.callHackage "websockets" "0.10.0.0" {};

     # exception-transformers =
     #   hs.dontCheck super.exception-transformers;
     #  #       # Setup: Encountered missing dependencies:
     #  #       # HUnit >=1.2 && <1.6
     #  #       # builder for ‘/nix/store/365zv27f15qplgd6gd58fa8v26x2gg5z-exception-transformers-0.4.0.5.drv’ failed with exit code 1

     #  # Add various dependencies here.
     #  #
     #  # Local dependencies:
     #  # my-dependency = self.callPackage ./deps/my-dependency {};
     #  #
     #  # Local dependencies with tests disabled:
     #  # my-dependency = lib.dontCheck (self.callPackage ./deps/my-dependency {});
     #  #
     #  # Git dependencies:
     #  # mtl = self.callPackage (cabal2nixResult sources.mtl) {};
  };
};

in
########################################
let

### DERIVATION / ENVIRONMENT
  
installationDerivation = modifiedHaskellPackages.callPackage ./. {};

# development environment
# for `nix-shell --pure`
developmentDerivation = hs.linkWithGold 
    (hs.addBuildDepends installationDerivation developmentPackages);

developmentPackages = developmentHaskellPackages
                   # ++ developmentEmacsPackages 
                   ++ developmentSystemPackages;

developmentSystemPackages = with pkgs; [
  
 cabal-install

 coreutils
 inotify-tools
  
 emacs
 git

];

developmentHaskellPackages = with modifiedHaskellPackages; [
  
 # ghcid
 # ghc-mod

 stylish-haskell
 hasktags
 present
 hlint
 hoogle
 hindent
  
];

 # developmentHaskellPackages = with Packages; [
 #    dante
 #  ];

environment = hs.shellAware developmentDerivation;
   # if pkgs.lib.inNixShell then drv.env else drv;

in
########################################

environment

########################################
/*

*/

