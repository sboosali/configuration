# HM_FILE ?=$HOME/configuration/home-manager/nix/home.nix


















    #--------------------------#

    local PACKAGE

    if  printf '%s\n' "${ArgumentList[@]}" | grep -P '^library$'
        # ^ i.e. if "library" is in ArgumentList
    then
        for FILE in "${CabalFiles[@]}"
        do

            PACKAGE=$(_cabal_get_package_from_file "$(grep -l -i "^library[[:space:]]*" "$FILE" 2>/dev/null)")

            if [ -n "$PACKAGE" ]
            then
                echo "$PACKAGE"
                echo "lib:$PACKAGE"
            fi

        done | sort | uniq

        # ^ non-internal libraries are named as the basename of the « .cabal » file they're in.
        #   but not all « .cabal » files have a « library » stanza.

    fi

    #--------------------------#

























#--------------------------------------#

# https://stackoverflow.com/a/26759734/1337806
sboo-set-branch() {

    if [ -x "$(command -v __git_ps1)" ]
       # ^ if present and executable
    then
        BRANCH="$(__git_ps1 \(%s\))"
        # echo $BRANCH
    fi

}

# ^ unless empty or unset
# shellcheck disable=SC2154 
# if [ -z "$__git_ps1" ]; then

#--------------------------------------#

sboo-prompt-command-git() {
 sboo-set-branch
}

SBOO_PROMPT_COMMAND_GIT="{ [ -x sboo-prompt-command-git ] && sboo-prompt-command-git; }"

export PROMPT_COMMAND="$SBOO_PROMPT_COMMAND_GIT; $PROMPT_COMMAND"

# function sboo-get-branch {
#  # unless empty or unset
#  if [ -z "$__git_ps1" ]; then
#    "$(__git_ps1 \(%s\))"
#  fi
# }














_home-manager_subcommands () {

    local Subcommands
    Subcommands=("help" "edit" "build" "switch" "generations" "remove-generations" "expire-generations" "packages" "news")

    for WORD in ${Subcommands[@]}
    do

        echo "$WORD"

    done
}

##################################################

#   -f FILE                     # compgen -A file; compgen -A directory 
#   -A ATTRIBUTE                # compgen -W programs.*
#   -I PATH                     # compgen -A directory 
#   -v
#   -n
#   -h

_home-manager_completions () {

    local Subcommands
    Subcommands=( $(_home-manager_subcommands) )

    # ^ « home-manager »'s subcommands.

    local CurrentWord
    CurrentWord=${COMP_WORDS[$COMP_CWORD]}

    # ^ the word currently being completed

    for WORD in ${Subcommands[@]}
    do

        COMPREPLY+=($WORD)

    done

    local CurrentWord
    CurrentWord=${COMP_WORDS[$COMP_CWORD]}

    COMPREPLY=( $( compgen -W "$( eval "${CommandLine[@]}" 2>/dev/null ) $( _cabal_targets "${CommandLine[@]}" ) $( _cabal_subcommands "${COMP_WORDS[@]}" )" -- "$CurrentWord" ) )

}






















    #--------------------------#

    for WORD in "${Subcommands[@]}"
    do

        COMPREPLY+=( "$WORD" )

    done

    COMPREPLY=( $( compgen -W "${Subcommands[*]} ${Options[*]}" -- "$CurrentWord" ) )


    COMPREPLY=()

    COMPREPLY+=( $( compgen -W "${Options[*]}" -- "$CurrentWord" ) )
    COMPREPLY+=( $( compgen -W "${Subcommands[*]}" -- "$Curren












_home-manager_completions () {

    #--------------------------#

    local Subcommands
    Subcommands=( "help" "edit" "build" "switch" "generations" "remove-generations" "expire-generations" "packages" "news" )

    # ^ « home-manager »'s subcommands.

    #--------------------------#

    local Options
    Options=( "-f" "-A" "-I" "-h" "-n" "-v" )

    # ^ « home-manager »'s options.

    #--------------------------#

    local CurrentWord
    CurrentWord=${COMP_WORDS[$COMP_CWORD]}

    # ^ the word currently being completed

    #--------------------------#

    COMPREPLY=()

    COMPREPLY+=( $( compgen -W "${Subcommands[@]}" -- "$CurrentWord" ) )
    COMPREPLY+=( $( compgen -W "${Options[@]}" -- "$CurrentWord" ) )

    #--------------------------#
}











    local CompletionWords

    CompletionWords=( "${COMP_WORDS[@]}" )













    local CompletionWords
    local Word
    CompletionWords=()

    for Index in "${!COMP_WORDS[@]}"
    do
        Word=${COMP_WORDS[Index]}

        

        CompletionWords[Index]=Word

        # ^ merge colon-separated tokens.
        #
        #   e.g. « ( "cabal" "new-test" "spiros" ":" "test" ":" "unit" ) » becomes
        #        « ( "cabal" "new-test" "spiros:test:unit" ) »
        #
    done








_cabal_merge_colon_separated_words()

{
    local WordsArray
    WordsArray=$1

    local OldWord
    local NewWord
    NewWord=""

    local CompletionWords
    CompletionWords=()

    for OldWord in "${$WordsArray[@]}"
    do
        if [ "$OldWord" == ":" ]
        then

            NewWord="$NewWord:"
            continue

        else

            NewWord="$OldWord"

        fi

        CompletionWords+=( "$NewWord" )

    done

    for CompletionWord in "${CompletionWords[@]}"
    do

        echo "$CompletionWord"
    
    done

}



















_cabal_merge_colon_separated_words()

{

    local OldWord
    local NewWord
    NewWord=""

    local CompletionWords
    CompletionWords=()

    for OldWord in "${WordsArray[@]}"
    do
        if [ "$OldWord" == ":" ]
        then

            NewWord="${NewWord}:"
            continue

        else

            NewWord="$OldWord"

        fi

        CompletionWords+=( "$NewWord" )

    done

    for CompletionWord in "${CompletionWords[@]}"
    do

        echo "$CompletionWord"
    
    done

}








    for OldWord in "${WordsArray[@]}"
    do
        if [ "$OldWord" == ":" ]
        then

            NewWord="${NewWord}:"
            continue

        else

            NewWord="${NewWord}${OldWord}"
            OldWord=""

        fi

        CompletionWords+=( "$NewWord" )
        NewWord=""
    done

    for CompletionWord in "${CompletionWords[@]}"
    do

        echo "$CompletionWord"
    
    done










_cabal_merge_colon_separated_words()

{

    local Word
    Word=""

    local ThisWord
    local NextWord

    local ThisIndex
    local NextIndex

    ThisIndex="0"

    local CompletionWords
    CompletionWords=()

    while [ "$ThisIndex" -lt "${#WordsArray[@]}" ]
    do

        NextIndex=$((ThisIndex + 1))

        ThisWord=${WordsArray[ThisIndex]}
        NextWord=${WordsArray[NextIndex]}

        if [ "$ThisWord" != ":" ] && [ "$NextWord" == ":" ]
        then #-----------------#

            Word=""

            while [ "$ThisWord" != ":" ] && [ "$NextWord" == ":" ]
            do

                Word="${Word}${ThisWord}:"

                ThisIndex=$((ThisIndex + 2))
                ThisWord=${WordsArray[ThisIndex]}
                NextWord=${WordsArray[NextIndex]}
            done

            Word="${Word}${ThisWord}"

            CompletionWords+=( "$Word" )

            ThisIndex=$((ThisIndex + 1))
        else #-----------------#

            CompletionWords+=( "$ThisWord" )

            ThisIndex=$((ThisIndex + 1))
        fi #-----------------#
    done

    for CompletionWord in "${CompletionWords[@]}"
    do

        echo "$CompletionWord"
    
    done

}

# NOTES
#
# (1) « $(( ... )) »:
#
#     * is the syntax for a Bash arithmetic expression.
#
# (2) « ${#...[@]} »:
#
#     * gets the length of a Bash array.
#
# 









~/src$ echo "${WordsArray[@]// : /:}"
cabal new-test spiros : test : unit

~/src$ echo "${WordsArray// : /:}"
cabal

~/src$ WordsString="${WordsArray[@]}"

~/src$ echo ${WordsString} 
cabal new-test spiros : test : unit

~/src$ echo "${WordsString// : /:}"
cabal new-test spiros:test:unit








##################################################

#_cabal_merge_colon_separated_words COMP_WORDS

_cabal_merge_colon_separated_words()

{
    local CompletionString
    local CompletionArray
    CompletionArray=()

    #--------------------------#

    CompletionString="${WordsArray[*]}"
    CompletionString="${CompletionString// : /:}"

    { IFS=" " read -r -a CompletionArray <<< "$CompletionString"; }

    #--------------------------#

    for Completion in "${CompletionArray[@]}"
    do

        echo "$Completion"
    
    done
}

# NOTES
#
# (1) « ${var//xxx/yyy} »:
#
#     * Replaces all substrings « xxx » with string « yyy » in variable « $var ».
#
# 
# 

















    echo $COMP_CWORD   >> ~/.cache/cabal/COMP_WORDS.txt
    echo $CurrentIndex >> ~/.cache/cabal/COMP_WORDS.txt






# shellcheck disable=SC2207
_cabal()

{
    # no completion past cabal arguments.
    _cabal_has_doubledash && return

    #--------------------------#

    local CompletionsString
    local CompletionsArray

    {

        CompletionsString="${COMP_WORDS[*]}"
        CompletionsString="${CompletionsString// : /:}"

        { IFS=" " read -r -a CompletionsArray <<< "$CompletionsString"; }

        # ^ merge colon-separated tokens.
        #
        #   e.g. « ( "cabal" "new-test" "spiros" ":" "test" ":" "unit" ) » becomes
        #        « ( "cabal" "new-test" "spiros:test:unit" ) »
        #
    }

    #--------------------------#

    local COMP_WORDS_LENGTH
    local CompletionsLength
    local LengthDifference

    COMP_WORDS_LENGTH="${#COMP_WORDS[@]}"
    CompletionsLength="${#CompletionsArray[@]}"

    LengthDifference=$(( COMP_WORDS_LENGTH - CompletionsLength ))

    #--------------------------#

    # get the word currently being completed:
    local CurrentWord
    local CurrentIndex

    CurrentIndex=$(( COMP_CWORD - LengthDifference ))


    CurrentWord=${CompletionsArray[$CurrentIndex]}
    #CurrentWord=${COMP_WORDS[$COMP_CWORD]}

    #DEBUGGING# (mkdir -p  ~/.cache/cabal; for COMP_WORD in "${COMP_WORDS[@]}"; do printf '%s\n' "$COMP_WORD"; done >> ~/.cache/cabal/COMP_WORDS.txt)

    #--------------------------#

    # create a « cabal ... --list-options » command line to « eval »:
    local CommandLine

    # copy all words the user has entered:
    CommandLine=( "${CompletionsArray[@]}" )

    # replace the current word with « --list-options »:
    CommandLine[${COMP_CWORD}]="--list-options"

    #--------------------------#

    # register completions via the « COMPREPLY » array:

    COMPREPLY=( $( compgen -W "$( eval "${CommandLine[@]}" 2>/dev/null ) $( _cabal_targets "${CompletionsArray[@]}" ) $( _cabal_subcommands "${CompletionsArray[@]}" )" -- "$CurrentWord" ) )

    #TODO#
    # COMPREPLY=()
    # while IFS='' read -r line; do array+=("$line"); done < <( compgen -W "$( eval "${CommandLine[@]}" 2>/dev/null ) $( _cabal_targets "${CommandLine[@]}" ) $( _cabal_subcommands "${COMP_WORDS[@]}" )" -- "$CurrentWord" )

    #--------------------------#
}





















#------------------------------------------------#

_home-manager_list_nix_attributes ()

{

    echo "accounts.email.accounts"
    echo "accounts.email.accounts.private"
    echo "dconf.settings"
    echo "file"
    echo "general"
    echo "gtk"
    echo "gtk.font"
    echo "gtk.font.name"
    echo "gtk.font.package"
    echo "gtk.theme"
    echo "gtk.theme.name"
    echo "gtk.theme.package"
    echo "home.file"
    echo "home.keyboard"
    echo "home.keyboard.layout"
    echo "home.keyboard.model"
    echo "home.keyboard.options"
    echo "home.keyboard.variant"
    echo "home.language"
    echo "home.language.address"
    echo "home.language.base"
    echo "home.language.monetary"
    echo "home.language.paper"
    echo "home.language.time"
    echo "home.packages"
    echo "home.username"
    echo "lib"
    echo "manual.html"
    echo "manual.manpages"
    echo "news.display"
    echo "nixpkgs.config"
    echo "nixpkgs.overlays"
    echo "programs.afew"
    echo "programs.alot"
    echo "programs.alot.bindings"
    echo "programs.alot.bindings.bufferlist"
    echo "programs.alot.bindings.envelope"
    echo "programs.alot.bindings.global"
    echo "programs.alot.bindings.search"
    echo "programs.alot.bindings.taglist"
    echo "programs.alot.bindings.thread"
    echo "programs.alot.hooks"
    echo "programs.astroid"
    echo "programs.autorandr"
    echo "programs.autorandr.hooks"
    echo "programs.autorandr.hooks.postswitch"
    echo "programs.autorandr.hooks.predetect"
    echo "programs.autorandr.hooks.preswitch"
    echo "programs.autorandr.profiles"
    echo "programs.bash"
    echo "programs.beets"
    echo "programs.beets.settings"
    echo "programs.browserpass"
    echo "programs.browserpass.browsers"
    echo "programs.chromium"
    echo "programs.chromium.extensions"
    echo "programs.chromium.package"
    echo "programs.direnv"
    echo "programs.direnv.config"
    echo "programs.direnv.stdlib"
    echo "programs.eclipse"
    echo "programs.eclipse.plugins"
    echo "programs.emacs"
    echo "programs.emacs.overrides"
    echo "programs.emacs.package"
    echo "programs.feh"
    echo "programs.feh.keybindings"
    echo "programs.firefox"
    echo "programs.firefox.package"
    echo "programs.fish"
    echo "programs.fish.package"
    echo "programs.fzf"
    echo "programs.git"
    echo "programs.git.aliases"
    echo "programs.git.ignores"
    echo "programs.git.includes"
    echo "programs.git.lfs"
    echo "programs.git.package"
    echo "programs.git.signing"
    echo "programs.git.signing.key"
    echo "programs.go"
    echo "programs.go.package"
    echo "programs.go.packages"
    echo "programs.htop"
    echo "programs.htop.delay"
    echo "programs.htop.fields"
    echo "programs.htop.meters"
    echo "programs.htop.meters.left"
    echo "programs.htop.meters.right"
    echo "programs.info"
    echo "programs.irssi"
    echo "programs.irssi.aliases"
    echo "programs.irssi.networks"
    echo "programs.jq"
    echo "programs.jq.colors"
    echo "programs.keychain"
    echo "programs.keychain.agents"
    echo "programs.keychain.keys"
    echo "programs.keychain.package"
    echo "programs.lesspipe"
    echo "programs.man"
    echo "programs.matplotlib"
    echo "programs.matplotlib.config"
    echo "programs.mbsync"
    echo "programs.mbsync.groups"
    echo "programs.mbsync.package"
    echo "programs.mercurial"
    echo "programs.mercurial.aliases"
    echo "programs.mercurial.ignores"
    echo "programs.mercurial.package"
    echo "programs.msmtp"
    echo "programs.neovim"
    echo "programs.neovim.configure"
    echo "programs.neovim.package"
    echo "programs.newsboat"
    echo "programs.newsboat.browser"
    echo "programs.newsboat.queries"
    echo "programs.newsboat.urls"
    echo "programs.noti"
    echo "programs.noti.settings"
    echo "programs.notmuch"
    echo "programs.notmuch.new"
    echo "programs.notmuch.new.ignore"
    echo "programs.notmuch.new.tags"
    echo "programs.offlineimap"
    echo "programs.opam"
    echo "programs.opam.package"
    echo "programs.pidgin"
    echo "programs.pidgin.package"
    echo "programs.pidgin.plugins"
    echo "programs.rofi"
    echo "programs.rofi.colors"
    echo "programs.rofi.colors.rows"
    echo "programs.rofi.colors.rows.active"
    echo "programs.rofi.colors.rows.active.background"
    echo "programs.rofi.colors.rows.active.foreground"
    echo "programs.rofi.colors.rows.active.highlight"
    echo "programs.rofi.colors.rows.active.highlight.background"
    echo "programs.rofi.colors.rows.active.highlight.foreground"
    echo "programs.rofi.colors.rows.normal"
    echo "programs.rofi.colors.rows.normal.background"
    echo "programs.rofi.colors.rows.normal.foreground"
    echo "programs.rofi.colors.rows.normal.highlight"
    echo "programs.rofi.colors.rows.normal.highlight.background"
    echo "programs.rofi.colors.rows.normal.highlight.foreground"
    echo "programs.rofi.colors.rows.urgent"
    echo "programs.rofi.colors.rows.urgent.background"
    echo "programs.rofi.colors.rows.urgent.foreground"
    echo "programs.rofi.colors.rows.urgent.highlight"
    echo "programs.rofi.colors.rows.urgent.highlight.background"
    echo "programs.rofi.colors.rows.urgent.highlight.foreground"
    echo "programs.rofi.colors.window"
    echo "programs.rofi.colors.window.background"
    echo "programs.rofi.colors.window.border"
    echo "programs.rofi.colors.window.separator"
    echo "programs.rofi.cycle"
    echo "programs.rofi.font"
    echo "programs.rofi.fullscreen"
    echo "programs.rofi.lines"
    echo "programs.rofi.location"
    echo "programs.rofi.padding"
    echo "programs.rofi.scrollbar"
    echo "programs.rofi.separator"
    echo "programs.rofi.terminal"
    echo "programs.rofi.theme"
    echo "programs.rofi.width"
    echo "programs.rofi.xoffset"
    echo "programs.rofi.yoffset"
    echo "programs.ssh"
    echo "programs.ssh.compression"
    echo "programs.taskwarrior"
    echo "programs.taskwarrior.config"
    echo "programs.termite"
    echo "programs.termite.browser"
    echo "programs.termite.font"
    echo "programs.termite.fullscreen"
    echo "programs.termite.geometry"
    echo "programs.termite.scrollbar"
    echo "programs.texlive"
    echo "programs.texlive.package"
    echo "programs.tmux"
    echo "programs.tmux.package"
    echo "programs.tmux.plugins"
    echo "programs.tmux.shortcut"
    echo "programs.tmux.terminal"
    echo "programs.tmux.tmuxinator"
    echo "programs.tmux.tmuxp"
    echo "programs.urxvt"
    echo "programs.urxvt.fonts"
    echo "programs.urxvt.keybindings"
    echo "programs.urxvt.package"
    echo "programs.urxvt.scroll.bar"
    echo "programs.urxvt.scroll.bar"
    echo "programs.urxvt.scroll.bar.align"
    echo "programs.urxvt.scroll.bar.floating"
    echo "programs.urxvt.scroll.bar.position"
    echo "programs.urxvt.scroll.bar.style"
    echo "programs.urxvt.scroll.lines"
    echo "programs.urxvt.shading"
    echo "programs.urxvt.transparent"
    echo "programs.vim"
    echo "programs.vim.package"
    echo "programs.vim.plugins"
    echo "programs.vim.settings"
    echo "programs.vscode"
    echo "programs.vscode.extensions"
    echo "programs.zathura"
    echo "programs.zathura.options"
    echo "programs.zsh"
    echo "programs.zsh.history"
    echo "programs.zsh.history.extended"
    echo "programs.zsh.history.path"
    echo "programs.zsh.history.save"
    echo "programs.zsh.history.share"
    echo "programs.zsh.history.size"
    echo "programs.zsh.plugins"
    echo "qt"
    echo "services.compton"
    echo "services.compton.backend"
    echo "services.compton.blur"
    echo "services.compton.fade"
    echo "services.compton.package"
    echo "services.compton.shadow"
    echo "services.dunst"
    echo "services.dunst.settings"
    echo "services.emacs"
    echo "services.flameshot"
    echo "services.kbfs"
    echo "services.kdeconnect"
    echo "services.kdeconnect.indicator"
    echo "services.keepassx"
    echo "services.keybase"
    echo "services.mbsync"
    echo "services.mbsync.frequency"
    echo "services.mbsync.package"
    echo "services.mbsync.verbose"
    echo "services.mpd"
    echo "services.mpd.network.port"
    echo "services.parcellite"
    echo "services.pasystray"
    echo "services.polybar"
    echo "services.polybar.config"
    echo "services.polybar.package"
    echo "services.polybar.script"
    echo "services.redshift"
    echo "services.redshift.brightness.day"
    echo "services.redshift.brightness.night"
    echo "services.redshift.latitude"
    echo "services.redshift.longitude"
    echo "services.redshift.package"
    echo "services.redshift.provider"
    echo "services.redshift.temperature.day"
    echo "services.redshift.temperature.night"
    echo "services.redshift.tray"
    echo "services.stalonetray"
    echo "services.stalonetray.config"
    echo "services.stalonetray.package"
    echo "services.syncthing"
    echo "services.syncthing.tray"
    echo "services.taffybar"
    echo "services.taffybar.package"
    echo "services.udiskie"
    echo "services.udiskie.automount"
    echo "services.udiskie.notify"
    echo "services.udiskie.tray"
    echo "services.unclutter"
    echo "services.unclutter.package"
    echo "services.unclutter.threshold"
    echo "services.unclutter.timeout"
    echo "services.xscreensaver"
    echo "systemd.user.paths"
    echo "systemd.user.services"
    echo "systemd.user.sockets"
    echo "systemd.user.targets"
    echo "systemd.user.timers"
    echo "xdg"
    echo "xresources.properties"
    echo "xsession"

}























These values don't really reflect the intended functionality of the -A option. The option is there to allow a home.nix of the form

{
  setup-a = import ./home-a.nix;
  setup-b = import ./home-b.nix;
}

where home-a.nix and home-b.nix are two separate Home Manager configurations.

You can then choose which one to activate using

$ home-manager -A setup-a switch
and

$ home-manager -A setup-b switch









#------------------------------------------------#

llvm =
 if   arguments.llvm != null
 then arguments.llvm
 else llvm_39;










##################################################
{ nixpkgs  ? <nixpkgs>
, config   ? {}
, overlays ? []
}:

#------------------------------------------------#

assert (let t = builtins.typeOf nixpkgs;
        in builtins.elem t ["string","path"]);

assert (let t = builtins.typeOf config;
        in builtins.elem t ["attrs"]);

assert (let t = builtins.typeOf overlays;
        in builtins.elem t ["list"]);

##################################################
let
#------------------------------------------------#

pkgs = import nixpkgs { inherit config overlays; };

#------------------------------------------------#

self  = pkgs;
super = pkgs;

#------------------------------------------------#

mkGhc = { version, name, sha256, llvm ? llvm_39, perl ? self.perl }:

  let

  platform = stdenv.hostPlatform.system;

  sources = {

      "x86_64-linux" = {
        url = "http://haskell.org/ghc/dist/${version}/ghc-${version}-x86_64-deb8-linux.tar.xz";
        inherit sha256;
      };

      "x86_64-darwin" = {
        url    = "http://haskell.org/ghc/dist/${version}/ghc-${version}-x86_64-apple-darwin.tar.xz";
        inherit sha256;
        sha256 = "09swx71gh5habzbx55shz2xykgr96xkcy09nzinnm4z0yxicy3zr";
      };

      # "armv7l-linux" = {
      #   url = "http://haskell.org/ghc/dist/${version}/ghc-${version}-armv7-deb8-linux.tar.xz";
      #  inherit sha256;
      # };

    };

  in

  stdenv.mkDerivation {

    version = version;

    name = "${name}-binary";

    src = fetchurl (src.${platform} or (throw "« mkGhc »: unsupported platform « ${platform} »"));

    nativeBuildInputs = [ perl ];

    # Stripping combined with patchelf breaks the executables (they die
    # with a segfault or the kernel even refuses the execve).
    dontStrip = true;

    # No building is necessary, but calling make without flags ironically
    # calls install-strip ...
    dontBuild = true;

    doInstallCheck = true;
    installCheckPhase = ''
      # Sanity check, can ghc create executables?
      cd $TMP
      mkdir test-ghc; cd test-ghc
      cat > main.hs << EOF
        {-# LANGUAGE TemplateHaskell #-}
        module Main where
        main = putStrLn \$([|"yes"|])
      EOF
      $out/bin/ghc --make main.hs || exit 1
      echo compilation ok
      [ $(./main) == "yes" ]
    '';

    passthru = {
      targetPrefix = "";
      enableShared = true;
    };

    meta.license = stdenv.lib.licenses.bsd3;
    meta.platforms = [ "x86_64-linux" "x86_64-darwin" "armv7l-linux" ];
  };

# mkGhc = self.callPackage ./ghc-binary.nix
# { stdenv, substituteAll
# , fetchurl, perl, gcc, llvm_39
# , ncurses5, gmp, glibc, libiconv
# };

#------------------------------------------------#

ghcs = {

  v710 = {
    version       = "7.10.3";
    name          = "ghc-7.10";
    sha256        = if (stdenv.isLinux && stdenv.is64bit) then linux.sha256 else if (stdenv.isDarwin) then darwin.sha256 else null;
    linux.sha256  = "5e163c557e9236cce68be41c984eab0fcdbdc1602e39040ca9ae325e6bdec1c3";
    darwin.sha256 = "4b537228d49b5ea0f8e8dbcc440a5b3c3cb19a92579d607291cc0041422fa5c3";
  };

  v800 = {
    version       = "8.0.2";
    name          = "ghc-8.0";
    sha256        = if (stdenv.isLinux && stdenv.is64bit) then linux.sha256 else if (stdenv.isDarwin) then darwin.sha256 else null;
    linux.sha256  = null;
    darwin.sha256 = null;
  };

  v802 = rec {
    version       = "8.2.2";
    name          = "ghc-8.2";
    sha256        = if (stdenv.isLinux && stdenv.is64bit) then linux.sha256 else if (stdenv.isDarwin) then darwin.sha256 else null;
    linux.sha256  = "0ahv26304pqi3dm7i78si4pxwvg5f5dc2jwsfgvcrhcx5g30bqj8";
    darwin.sha256 = "09swx71gh5habzbx55shz2xykgr96xkcy09nzinnm4z0yxicy3zr";
  };

  v804 = {
    version       = "8.4.4";
    name          = "ghc-8.4";
    sha256        = if (stdenv.isLinux && stdenv.is64bit) then linux.sha256 else if (stdenv.isDarwin) then darwin.sha256 else null;
    linux.sha256  = null;
    darwin.sha256 = null;
  };

  v806 = {
    version       = "8.6.4";
    name          = "ghc-8.6";
    sha256        = if (stdenv.isLinux && stdenv.is64bit) then linux.sha256 else if (stdenv.isDarwin) then darwin.sha256 else null;
    linux.sha256  = null;
    darwin.sha256 = null;
  };

  v808 = {
    version       = "8.8.0";
    name          = "ghc-8.8";
    sha256        = if (stdenv.isLinux && stdenv.is64bit) then linux.sha256 else if (stdenv.isDarwin) then darwin.sha256 else null;
    linux.sha256  = null;
    darwin.sha256 = null;
  };

};

#------------------------------------------------#
in
##################################################
let
#------------------------------------------------#

#------------------------------------------------#
in
##################################################
{

  ghc710 = mkGhc { inherit (ghcs.v710) version sha256 name; llvm = llvm_35; };
  # ghc800 = mkGhc { inherit (ghcs.v800) version sha256 name; }
  # ghc802 = mkGhc { inherit (ghcs.v802) version sha256 name; }
  # ghc804 = mkGhc { inherit (ghcs.v804) version sha256 name; }

  # ghc806 = mkGhc { inherit (ghcs.v806) version sha256 name; }
  # ghc808 = mkGhc { inherit (ghcs.v808) version sha256 name; }

}
##################################################
/* Notes

https://downloads.haskell.org/~ghc/7.10.3/ghc-7.10.3-x86_64-deb8-linux.tar.bz2

*/






# ghc-7-10 = mkGhc { version = "7.10.3"; sha256 = linux.sha256 ; };
# ghc-8-00 = mkGhc { version = "8.0.2";  sha256 = linux.sha256 ; };
# ghc-8-02 = mkGhc { version = "8.2.2";  sha256 = linux.sha256 ; };
# ghc-8-04 = mkGhc { version = "8.4.4";  sha256 = linux.sha256 ; };
# ghc-8-06 = mkGhc { version = "8.6.4";  sha256 = linux.sha256 ; };
# ghc-8-08 = mkGhc { version = "8.8.0";  sha256 = linux.sha256 ; };
#ghc7103Binary
inherit ghc-7-10 ghc-8-00 ghc-8-02 ghc-8-04 ghc-8-06










#!/bin/bash
set -e
set -u

##################################################

INPUT=./xxx-package-xxx.cabal
OUTPUT=./dictation-vocabulary.cabal
CONFIG=./skeletor.ini

##################################################

##################################################

function _skeletor_for-dictation-vocabulary
(

echo ========================================
echo

echo "${INPUT}"
echo "${OUTPUT}"
echo "${CONFIG}"

echo
echo ========================================
echo


# shellcheck source=./skeletor.ini
source "${CONFIG}"

echo "xxx-package-xxx        = ${xxx_package_xxx}"
echo "xxx-program-xxx        = ${xxx_program_xxx}"
echo "Xxx_Module_xxX         = ${Xxx_Module_xxX}"
echo "__Synopsis__           = ${__Synopsis__}"
echo "__Categories__         = ${__Categories__}"
echo "__GithubUser__         = ${__GithubUser__}"
echo "__GithubRepository__   = ${__GithubRepository__}"
echo "xxx-package-subdir-xxx = ${xxx_package_subdir_xxx}"
echo "__Project__            = ${__Project__}"
echo "__ProjectDirectory__   = ${__ProjectDirectory__}"
echo "__Name__               = ${__Name__}"

echo
echo ========================================
echo

SUBSTITUTIONS=( )
SUBSTITUTIONS+=( --expression="s:xxx-package-xxx:${xxx_package_xxx}:g" )
# SUBSTITUTIONS+=( --expression="s:xxx-program-xxx:${xxx_program_xxx}:g" )
# SUBSTITUTIONS+=( --expression="s:Xxx_Module_xxX:${Xxx_Module_xxX}:g" )
# SUBSTITUTIONS+=( --expression="s:__Synopsis__:${__Synopsis__}:g" )
# SUBSTITUTIONS+=( --expression="s:__Categories__:${__Categories__}:g" )
# SUBSTITUTIONS+=( --expression="s:__GithubUser__:${__GithubUser__}:g" )
# SUBSTITUTIONS+=( --expression="s:__GithubRepository__:${__GithubRepository__}:g" )
# SUBSTITUTIONS+=( --expression="s:xxx-package-subdir-xxx:${xxx_package_subdir_xxx}:g" )
# SUBSTITUTIONS+=( --expression="s:__Project__:${__Project__}:g" )
# SUBSTITUTIONS+=( --expression="s:__ProjectDirectory__:${__ProjectDirectory__}:g" )
# SUBSTITUTIONS+=( --expression="s:__Name__:${__Name__}:g" )

echo
echo "${SUBSTITUTIONS[*]}"
echo

sed "${SUBSTITUTIONS[*]}" "${INPUT}"

#sed -e "s/xxx-package-xxx/${xxx_package_xxx}/g" -e "s/xxx-program-xxx/${xxx_program_xxx}/g" -e "s/Xxx_Module_xxX/${Xxx_Module_xxX}/g" -e "s/__Synopsis__/${__Synopsis__}/g" -e "s/__Categories__/${__Categories__}/g" -e "s/__GithubUser__/${__GithubUser__}/g" -e "s/__GithubRepository__/${__GithubRepository__}/g" -e "s/xxx-package-subdir-xxx/${xxx_package_subdir_xxx}/g" -e "s/__Project__/${__Project__}/g" -e "s/__ProjectDirectory__/${__ProjectDirectory__}/g" -e "s/__Name__/${__Name__}/g" "${INPUT}"
#sed -e "s/xxx-package-xxx/${xxx_package_xxx}/g" "${INPUT}" > "${OUTPUT}"
#sed -e 's:AND:\n&:g' -e 's:GROUP BY:\n&:g' -e 's:UNION:\n&:g' -e 's:FROM:\n&:g' "${INPUT}" > "${OUTPUT}"
#SUBSTITUTIONS+=( "'"--expression="s:xxx-package-xxx:${xxx_package_xxx}:g""'" )

echo
echo ========================================

)

##################################################

_skeletor_for-dictation-vocabulary













SUBSTITUTIONS=( )
SUBSTITUTIONS+=( "--expression=s/xxx-package-xxx/${xxx_package_xxx}/g" )
SUBSTITUTIONS+=( "--expression=s/xxx-program-xxx/${xxx_program_xxx}/g" )
SUBSTITUTIONS+=( "--expression=s/Xxx_Module_xxX/${Xxx_Module_xxX}/g" )
SUBSTITUTIONS+=( "--expression=s:__Categories__:${__Categories__}:g" )
SUBSTITUTIONS+=( "--expression=s/__GithubUser__/${__GithubUser__}/g" )
SUBSTITUTIONS+=( "--expression=s/__GithubRepository__/${__GithubRepository__}/g" )
SUBSTITUTIONS+=( "--expression=s:xxx-package-subdir-xxx:${xxx_package_subdir_xxx}:g" )
SUBSTITUTIONS+=( "--expression=s:__Project__:${__Project__}:g" )
SUBSTITUTIONS+=( "--expression=s:__ProjectDirectory__:${__ProjectDirectory__}:g" )

SUBSTITUTIONS+=( "--expression=s/__Name__/${__Name__}/g" )
SUBSTITUTIONS+=( "--expression=s:__Synopsis__:${__Synopsis__}:g" )

for SUBSTITUTION in "${SUBSTITUTIONS[@]}"
do
  printf "'%s'\n" "$SUBSTITUTION"
done






#sed "--expression=s/xxx-package-xxx/${xxx_package_xxx}/g" "--expression=s/Xxx_Module_xxX/${Xxx_Module_xxX}/g" "${INPUT}"

SUBSTITUTIONS+=( "--expression=s:__ProjectDirectory__:$(readlink -f ${__ProjectDirectory__}):g" )
















 "xbindkeys/.xbindkeysrc".source   = ../../../xbindkeys/xbindkeysrc;
 "xbindkeys/.xbindkeysrc".onChange = ''
    
     # Whether « ${xbindkeys} » is installed:

if   [ -x "$(command -v ${xbindkeys})" ]
then

     # Whether « ${xbindkeys} » is running:

if   pgrep -x ${xbindkeys} > /dev/null

then # Reload the config:

     killall --signal USR1 ${xbindkeys}

else # Start the daemon:

     ${xbindkeys} --poll-rc --file ${xbindkeysrc} || true

fi
fi

# ^ Start the « xbindkeys » daemon in the background.

# ^ « --poll-rc » means: reload the config whenever it changes.

# ^ « -f _ » means: load the given config ("rc") file.
# By default, the config is at « ~/.xbindkeysrc », 
# which we've overriden to be under (one of) « $XDG_CONFIG_DIRS ».

  '';








  #----------------------------#

 "xbindkeys/xbindkeysrc.scm".source   = ../../../xbindkeys/test-xbindkeysrc.scm;
 "xbindkeys/xbindkeysrc.scm".onChange = ''
    
         # Whether « ${xbindkeys} » is installed:
    
    if   [ -x "$(command -v ${xbindkeys})" ]
    then
    
         # Whether « ${xbindkeys} » is running:
    
    if   pgrep -x "xbindkeys" > /dev/null
    
    then # Reload the config:
    
         kill --signal USR1 $(pgrep "xbindkeys")
    
    else # Start the daemon:
    
         ${xbindkeys} --poll-rc --file-guile ${xbindkeysrc}
    
    fi
    fi
    
    # ^ Start the « xbindkeys » daemon in the background.
    
    # ^ « --poll-rc » means: reload the config whenever it changes.
    
    # ^ « -f _ » means: load the given config ("rc") file.
    # By default, the config is at « ~/.xbindkeysrc »,
    # which we've overriden to be under (one of) « $XDG_CONFIG_DIRS ».
  '';















#!/bin/bash

##################################################

XBINDKEYS=${XBINDKEYS:xbindkeys}
XBINDKEYSRC=${XBINDKEYSRC:"~/.config/xbindkeys/xbindkeysrc.scm"}

##################################################

     # Whether « xbindkeys » is installed:

if   [ -x "$(command -v "${XBINDKEYS}")" ]
then

     # Whether « xbindkeys » is running:

if   pgrep -x "XBINDKEYS" > /dev/null

then # Reload the config:

     killall -s1 XBINDKEYS

else # Start the daemon:

     ${XBINDKEYS} --poll-rc -fg "${XBINDKEYSRC}"

fi
fi

##################################################

# ^ Start the « xbindkeys » daemon in the background.

# ^ « --poll-rc » means: reload the config whenever it changes.

# ^ « -fg _ » means: load the given config (a Guile File).
# By default, the config is at « ~/.xbindkeysrc »,
# which we've overriden to be under « $XDG_CONFIG_HOME ».

##################################################



















(use-modules (srfi srfi-19))
(use-modules (ice-9 format))

(define (run-command string) (system string))

(define (notify-send title message)
    (run-command
     (format #f "notify-send '~a' '~a'" title message)))
(define (popup-date)
    (let ((DATE (date->string (current-date) "~A, ~B ~e ~Y ~H:~S"))
          )
      (notify-send "date" DATE)))

(format #f "notify-send '~a' '~a'" "title" "message")
(popup-date)



















## Files

* `./bin/xxx-program-xxx`
* `./share/man/man1/xxx-program-xxx.1.gz`
* `./share/bash-completion/xxx-program-xxx.bash`
* `./share/zsh-completion/xxx-program-xxx.zsh`
* `./share/fish-completion/xxx-program-xxx.fish`









## Files

* `./bin/xxx-program-xxx`                   — 
* `./share/man/man1/xxx-program-xxx.1.gz`   — 
* `./share/completion/xxx-program-xxx.bash` — 
* `./share/completion/xxx-program-xxx.zsh`  — 
* `./share/completion/xxx-program-xxx.fish` — 












## Files

* `./bin/x86_64-linux/xxx-program-xxx`      — *statically-linked* executable (runs on any 64-bit Linux).
* `./share/man/man1/xxx-program-xxx.1.gz`   — `man` page
* `./share/completion/xxx-program-xxx.bash` — `bash` completion
* `./share/completion/xxx-program-xxx.zsh`  — `zsh` completion
* `./share/completion/xxx-program-xxx.fish` — `fish` completion
































;;----------------------------------------------;;
;; Functions -----------------------------------;;
;;----------------------------------------------;;

(define (send-keys keys)

  ;; 

  (let ((keysyms keys) ;TODO concat, space-separated
        )

    (xdotool-key keysyms)))
;;----------------------------------------------;;

(define (parse-keys s)

  ;; 

  (let* ((keychords   (string-split s #\ ))
         (keysequence (map (lambda (keychord)
                             (string-split keychord #\-))
                           keychords))
         )

    keysequence))

;; e.g.
;;
;; M-: (parse-keys "C-c")
;;   ⇒ (("C" "c"))
;;

;;----------------------------------------------;;

(define (munge-keys s)

  ;; 

  (let* ((keysequence (parse-keys s))
        )

    keysequence))

;; e.g.
;;
;; M-: (munge-keys "C-c")
;;   ⇒ "Control_L+c"
;;


























;;----------------------------------------------;;

;; (xbindkey '(release "m:0x0" "c:118")
;;           "xdotool key --clearmodifiers 'Control_L+0x76'")

;; ;; needs extra presses
;; ;; (xbindkey '(release "m:0x0" "c:___") ;; other keys don't work
;; (xbindkey '(release "m:0x0" "c:107") ;; buggy
;;  ;; "sleep 0.03 && xdotool key --clearmodifiers 'Control_L+0x63'")
;;  ;; "xdotool key --clearmodifiers 'Control_L+0x63'") 
;;  ;; "xte 'keydown Control_L' 'key C' 'keyup Control_L'")
;; ;; "xvkbd -text '\\Cc'")
;;  "xdotool keydown control key c xdotool keyup control")
;;  ;; doesn't work in emacs (where i need it most), but works in terminal, seems to work in chrome and firefox

;; (xbindkey '(release "m:0x0" "c:78")
;;           "xdotool key --clearmodifiers 'Control_L+0x7a'")

;;----------------------------------------------;;

;; (xbindkey '(release "m:0x0" "c:0xff63") 
;;  "xdotool key --clearmodifiers 'Control_L+v'")
;; (xbindkey '(release "m:0x0" "c:0xff61")
;;  "sleep 0.03 && xdotool key --clearmodifiers 'Control_L+c'")
;; (xbindkey '(release "m:0x0" "c:0xff14") 
;;  "xdotool key --clearmodifiers 'Control_L+z'")

;; xdotool --clearmodifiers key 'control+_'

;; (xbindkey '(release "m:0x0" "c:118") 
;;  "xdotool key --clearmodifiers 'Control_L+v'")
;; (xbindkey '(release "m:0x0" "c:107")
;;  "sleep 0.03 && xdotool key --clearmodifiers 'Control_L+c'")
;; (xbindkey '(release "m:0x0" "c:78") 
;;  "xdotool key --clearmodifiers 'Control_L+z'")

;; (xbindkey '("m:0x0" "c:118") "C-v")
;; (xbindkey '("m:0x0" "c:107") "C-c")
;; (xbindkey '("m:0x0" "c:78") "C-z")

;; via `xbindkey -k`

    ;; m:0x0 + c:9
    ;; Escape

    ;; m:0x0 + c:118
    ;; Insert

    ;; m:0x0 + c:107
    ;; Print

    ;; m:0x0 + c:78
    ;; Scroll_Lock





































! ============================================== !

! 2015-06-15
! http://xahlee.info/linux/linux_xmodmap_tutorial.html

! ---------------------------------------------- !

! change unshifted layout,
! but the preserve the shifted symbols.

! ---------------------------------------------- !
! Keybindings ---------------------------------- !
! ---------------------------------------------- !

! swap left (/ open) ones:

keycode  18 = 9 bracketleft 9 bracketleft
keycode  19 = 0 bracketright 0 bracketright

! ---------------------------------------------- !

! swap right (/ close) ones:

keycode  34 = parenleft braceleft parenleft braceleft
keycode  35 = parenright braceright parenright braceright

! ---------------------------------------------- !
! Notes -----------------------------------------!
! ---------------------------------------------- !

! $ xmodmap -pke
!
!   keycode  18 = 9 parenleft 9 parenleft
!   keycode  19 = 0 parenright 0 parenright
!   keycode  ...
!   keycode  34 = bracketleft braceleft bracketleft braceleft
!   keycode  35 = bracketright braceright bracketright braceright
!

! what the default is:
!
!   keycode  18 = 9 ( 9 (
!   keycode  19 = 0 ) 0 )
!   keycode  34 = [ } [ }
!   keycode  35 = ] } ] }
!
! what we want:
!
!   keycode  18 = 9 [ 9 [
!   keycode  19 = 0 ] 0 ]
!   keycode  34 = ( } ( }
!   keycode  35 = ) } ) }
!
! i.e.:
!
! preserve « 9 0 » and « { } ».

! ============================================== !























    for i in $(seq 1 $#)
    do
        i+=1
        echo $i
    done



















let
#------------------------------------------------#

/* Modifiers */

XK_Shift_L                      = 0xffe1;  /* Left shift */
XK_Shift_R                      = 0xffe2;  /* Right shift */
XK_Control_L                    = 0xffe3;  /* Left control */
XK_Control_R                    = 0xffe4;  /* Right control */
XK_Caps_Lock                    = 0xffe5;  /* Caps lock */
XK_Shift_Lock                   = 0xffe6;  /* Shift lock */

XK_Meta_L                       = 0xffe7;  /* Left meta */
XK_Meta_R                       = 0xffe8;  /* Right meta */
XK_Alt_L                        = 0xffe9;  /* Left alt */
XK_Alt_R                        = 0xffea;  /* Right alt */
XK_Super_L                      = 0xffeb;  /* Left super */
XK_Super_R                      = 0xffec;  /* Right super */
XK_Hyper_L                      = 0xffed;  /* Left hyper */
XK_Hyper_R                      = 0xffee;  /* Right hyper */

#------------------------------------------------#

/*
 * TTY function keys, cleverly chosen to map to ASCII, for convenience of
 * programming, but could have been arbitrary (at the cost of lookup
 * tables in client code).
 */

XK_BackSpace                    = 0xff08;  /* Back space, back char */
XK_Tab                          = 0xff09;
XK_Linefeed                     = 0xff0a;  /* Linefeed, LF */
XK_Clear                        = 0xff0b;
XK_Return                       = 0xff0d;  /* Return, enter */
XK_Pause                        = 0xff13;  /* Pause, hold */
XK_Scroll_Lock                  = 0xff14;
XK_Sys_Req                      = 0xff15;
XK_Escape                       = 0xff1b;
XK_Delete                       = 0xffff;  /* Delete, rubout */

#------------------------------------------------#

/* Cursor control & motion */

XK_Home                         = 0xff50;
XK_Left                         = 0xff51;  /* Move left, left arrow */
XK_Up                           = 0xff52;  /* Move up, up arrow */
XK_Right                        = 0xff53;  /* Move right, right arrow */
XK_Down                         = 0xff54;  /* Move down, down arrow */
XK_Prior                        = 0xff55;  /* Prior, previous */
XK_Page_Up                      = 0xff55;
XK_Next                         = 0xff56;  /* Next */
XK_Page_Down                    = 0xff56;
XK_End                          = 0xff57;  /* EOL */
XK_Begin                        = 0xff58;  /* BOL */

#------------------------------------------------#

/* Misc functions */

XK_Select                       = 0xff60;  /* Select, mark */
XK_Print                        = 0xff61;
XK_Execute                      = 0xff62;  /* Execute, run, do */
XK_Insert                       = 0xff63;  /* Insert, insert here */
XK_Undo                         = 0xff65;
XK_Redo                         = 0xff66;  /* Redo, again */
XK_Menu                         = 0xff67;
XK_Find                         = 0xff68;  /* Find, search */
XK_Cancel                       = 0xff69;  /* Cancel, stop, abort, exit */
XK_Help                         = 0xff6a;  /* Help */
XK_Break                        = 0xff6b;
XK_Mode_switch                  = 0xff7e;  /* Character set switch */
XK_script_switch                = 0xff7e;  /* Alias for mode_switch */
XK_Num_Lock                     = 0xff7f;

#------------------------------------------------#

/*
 * Latin 1
 * (ISO/IEC 8859-1 = Unicode U+0020..U+00FF)
 * Byte 3 = 0
 */

XK_space                        = 0x0020;  /* U+0020 SPACE */
XK_exclam                       = 0x0021;  /* U+0021 EXCLAMATION MARK */
XK_quotedbl                     = 0x0022;  /* U+0022 QUOTATION MARK */
XK_numbersign                   = 0x0023;  /* U+0023 NUMBER SIGN */
XK_dollar                       = 0x0024;  /* U+0024 DOLLAR SIGN */
XK_percent                      = 0x0025;  /* U+0025 PERCENT SIGN */
XK_ampersand                    = 0x0026;  /* U+0026 AMPERSAND */
XK_apostrophe                   = 0x0027;  /* U+0027 APOSTROPHE */
XK_quoteright                   = 0x0027;  /* deprecated */
XK_parenleft                    = 0x0028;  /* U+0028 LEFT PARENTHESIS */
XK_parenright                   = 0x0029;  /* U+0029 RIGHT PARENTHESIS */
XK_asterisk                     = 0x002a;  /* U+002A ASTERISK */
XK_plus                         = 0x002b;  /* U+002B PLUS SIGN */
XK_comma                        = 0x002c;  /* U+002C COMMA */
XK_minus                        = 0x002d;  /* U+002D HYPHEN-MINUS */
XK_period                       = 0x002e;  /* U+002E FULL STOP */
XK_slash                        = 0x002f;  /* U+002F SOLIDUS */
XK_0                            = 0x0030;  /* U+0030 DIGIT ZERO */
XK_1                            = 0x0031;  /* U+0031 DIGIT ONE */
XK_2                            = 0x0032;  /* U+0032 DIGIT TWO */
XK_3                            = 0x0033;  /* U+0033 DIGIT THREE */
XK_4                            = 0x0034;  /* U+0034 DIGIT FOUR */
XK_5                            = 0x0035;  /* U+0035 DIGIT FIVE */
XK_6                            = 0x0036;  /* U+0036 DIGIT SIX */
XK_7                            = 0x0037;  /* U+0037 DIGIT SEVEN */
XK_8                            = 0x0038;  /* U+0038 DIGIT EIGHT */
XK_9                            = 0x0039;  /* U+0039 DIGIT NINE */
XK_colon                        = 0x003a;  /* U+003A COLON */
XK_semicolon                    = 0x003b;  /* U+003B SEMICOLON */
XK_less                         = 0x003c;  /* U+003C LESS-THAN SIGN */
XK_equal                        = 0x003d;  /* U+003D EQUALS SIGN */
XK_greater                      = 0x003e;  /* U+003E GREATER-THAN SIGN */
XK_question                     = 0x003f;  /* U+003F QUESTION MARK */
XK_at                           = 0x0040;  /* U+0040 COMMERCIAL AT */
XK_A                            = 0x0041;  /* U+0041 LATIN CAPITAL LETTER A */
XK_B                            = 0x0042;  /* U+0042 LATIN CAPITAL LETTER B */
XK_C                            = 0x0043;  /* U+0043 LATIN CAPITAL LETTER C */
XK_D                            = 0x0044;  /* U+0044 LATIN CAPITAL LETTER D */
XK_E                            = 0x0045;  /* U+0045 LATIN CAPITAL LETTER E */
XK_F                            = 0x0046;  /* U+0046 LATIN CAPITAL LETTER F */
XK_G                            = 0x0047;  /* U+0047 LATIN CAPITAL LETTER G */
XK_H                            = 0x0048;  /* U+0048 LATIN CAPITAL LETTER H */
XK_I                            = 0x0049;  /* U+0049 LATIN CAPITAL LETTER I */
XK_J                            = 0x004a;  /* U+004A LATIN CAPITAL LETTER J */
XK_K                            = 0x004b;  /* U+004B LATIN CAPITAL LETTER K */
XK_L                            = 0x004c;  /* U+004C LATIN CAPITAL LETTER L */
XK_M                            = 0x004d;  /* U+004D LATIN CAPITAL LETTER M */
XK_N                            = 0x004e;  /* U+004E LATIN CAPITAL LETTER N */
XK_O                            = 0x004f;  /* U+004F LATIN CAPITAL LETTER O */
XK_P                            = 0x0050;  /* U+0050 LATIN CAPITAL LETTER P */
XK_Q                            = 0x0051;  /* U+0051 LATIN CAPITAL LETTER Q */
XK_R                            = 0x0052;  /* U+0052 LATIN CAPITAL LETTER R */
XK_S                            = 0x0053;  /* U+0053 LATIN CAPITAL LETTER S */
XK_T                            = 0x0054;  /* U+0054 LATIN CAPITAL LETTER T */
XK_U                            = 0x0055;  /* U+0055 LATIN CAPITAL LETTER U */
XK_V                            = 0x0056;  /* U+0056 LATIN CAPITAL LETTER V */
XK_W                            = 0x0057;  /* U+0057 LATIN CAPITAL LETTER W */
XK_X                            = 0x0058;  /* U+0058 LATIN CAPITAL LETTER X */
XK_Y                            = 0x0059;  /* U+0059 LATIN CAPITAL LETTER Y */
XK_Z                            = 0x005a;  /* U+005A LATIN CAPITAL LETTER Z */
XK_bracketleft                  = 0x005b;  /* U+005B LEFT SQUARE BRACKET */
XK_backslash                    = 0x005c;  /* U+005C REVERSE SOLIDUS */
XK_bracketright                 = 0x005d;  /* U+005D RIGHT SQUARE BRACKET */
XK_asciicircum                  = 0x005e;  /* U+005E CIRCUMFLEX ACCENT */
XK_underscore                   = 0x005f;  /* U+005F LOW LINE */
XK_grave                        = 0x0060;  /* U+0060 GRAVE ACCENT */
XK_quoteleft                    = 0x0060;  /* deprecated */
XK_a                            = 0x0061;  /* U+0061 LATIN SMALL LETTER A */
XK_b                            = 0x0062;  /* U+0062 LATIN SMALL LETTER B */
XK_c                            = 0x0063;  /* U+0063 LATIN SMALL LETTER C */
XK_d                            = 0x0064;  /* U+0064 LATIN SMALL LETTER D */
XK_e                            = 0x0065;  /* U+0065 LATIN SMALL LETTER E */
XK_f                            = 0x0066;  /* U+0066 LATIN SMALL LETTER F */
XK_g                            = 0x0067;  /* U+0067 LATIN SMALL LETTER G */
XK_h                            = 0x0068;  /* U+0068 LATIN SMALL LETTER H */
XK_i                            = 0x0069;  /* U+0069 LATIN SMALL LETTER I */
XK_j                            = 0x006a;  /* U+006A LATIN SMALL LETTER J */
XK_k                            = 0x006b;  /* U+006B LATIN SMALL LETTER K */
XK_l                            = 0x006c;  /* U+006C LATIN SMALL LETTER L */
XK_m                            = 0x006d;  /* U+006D LATIN SMALL LETTER M */
XK_n                            = 0x006e;  /* U+006E LATIN SMALL LETTER N */
XK_o                            = 0x006f;  /* U+006F LATIN SMALL LETTER O */
XK_p                            = 0x0070;  /* U+0070 LATIN SMALL LETTER P */
XK_q                            = 0x0071;  /* U+0071 LATIN SMALL LETTER Q */
XK_r                            = 0x0072;  /* U+0072 LATIN SMALL LETTER R */
XK_s                            = 0x0073;  /* U+0073 LATIN SMALL LETTER S */
XK_t                            = 0x0074;  /* U+0074 LATIN SMALL LETTER T */
XK_u                            = 0x0075;  /* U+0075 LATIN SMALL LETTER U */
XK_v                            = 0x0076;  /* U+0076 LATIN SMALL LETTER V */
XK_w                            = 0x0077;  /* U+0077 LATIN SMALL LETTER W */
XK_x                            = 0x0078;  /* U+0078 LATIN SMALL LETTER X */
XK_y                            = 0x0079;  /* U+0079 LATIN SMALL LETTER Y */
XK_z                            = 0x007a;  /* U+007A LATIN SMALL LETTER Z */
XK_braceleft                    = 0x007b;  /* U+007B LEFT CURLY BRACKET */
XK_bar                          = 0x007c;  /* U+007C VERTICAL LINE */
XK_braceright                   = 0x007d;  /* U+007D RIGHT CURLY BRACKET */
XK_asciitilde                   = 0x007e;  /* U+007E TILDE */

#------------------------------------------------#

/* Keypad functions, keypad numbers cleverly chosen to map to ASCII */

XK_KP_Space                     = 0xff80;  /* Space */
XK_KP_Tab                       = 0xff89;
XK_KP_Enter                     = 0xff8d;  /* Enter */
XK_KP_F1                        = 0xff91;  /* PF1, KP_A, ... */
XK_KP_F2                        = 0xff92;
XK_KP_F3                        = 0xff93;
XK_KP_F4                        = 0xff94;
XK_KP_Home                      = 0xff95;
XK_KP_Left                      = 0xff96;
XK_KP_Up                        = 0xff97;
XK_KP_Right                     = 0xff98;
XK_KP_Down                      = 0xff99;
XK_KP_Prior                     = 0xff9a;
XK_KP_Page_Up                   = 0xff9a;
XK_KP_Next                      = 0xff9b;
XK_KP_Page_Down                 = 0xff9b;
XK_KP_End                       = 0xff9c;
XK_KP_Begin                     = 0xff9d;
XK_KP_Insert                    = 0xff9e;
XK_KP_Delete                    = 0xff9f;
XK_KP_Equal                     = 0xffbd;  /* Equals */
XK_KP_Multiply                  = 0xffaa;
XK_KP_Add                       = 0xffab;
XK_KP_Separator                 = 0xffac;  /* Separator, often comma */
XK_KP_Subtract                  = 0xffad;
XK_KP_Decimal                   = 0xffae;
XK_KP_Divide                    = 0xffaf;

XK_KP_0                         = 0xffb0;
XK_KP_1                         = 0xffb1;
XK_KP_2                         = 0xffb2;
XK_KP_3                         = 0xffb3;
XK_KP_4                         = 0xffb4;
XK_KP_5                         = 0xffb5;
XK_KP_6                         = 0xffb6;
XK_KP_7                         = 0xffb7;
XK_KP_8                         = 0xffb8;
XK_KP_9                         = 0xffb9;

#------------------------------------------------#

/*
 * Auxiliary functions; note the duplicate definitions for left and right
 * function keys;  Sun keyboards and a few other manufacturers have such
 * function key groups on the left and/or right sides of the keyboard.
 * We've not found a keyboard with more than 35 function keys total.
 */

XK_F1                           = 0xffbe;
XK_F2                           = 0xffbf;
XK_F3                           = 0xffc0;
XK_F4                           = 0xffc1;
XK_F5                           = 0xffc2;
XK_F6                           = 0xffc3;
XK_F7                           = 0xffc4;
XK_F8                           = 0xffc5;
XK_F9                           = 0xffc6;
XK_F10                          = 0xffc7;
XK_F11                          = 0xffc8;
XK_F12                          = 0xffc9;
XK_F13                          = 0xffca;
XK_F14                          = 0xffcb;
XK_F15                          = 0xffcc;
XK_F16                          = 0xffcd;
XK_F17                          = 0xffce;
XK_F18                          = 0xffcf;
XK_F19                          = 0xffd0;
XK_F20                          = 0xffd1;
XK_F21                          = 0xffd2;
XK_F22                          = 0xffd3;
XK_F23                          = 0xffd4;
XK_F24                          = 0xffd5;

# #------------------------------------------------#

# keycodes = {

#  "1" = ;
#  "2" = ;
#  "3" = ;
#  "4" = ;
#  "5" = ;
#  "6" = ;
#  "7" = ;
#  "8" = ;
#  "9" = ;
#  "0" = ;

# #"" = ;

# };

in




















#------------------------------------------------#

# Build with:
#
#     $ home-manager -f ~/configuration/configs/nixpkgs/home-noattrs.nix build
#

##################################################
arguments@
{ pkgs, ...}:

##################################################
let
#------------------------------------------------#

file =

  let
  value-dynamic = builtins.getEnv "SBOO_HOME_NIX";
  value-static  = ~/configuration/home-manager/nix/home.nix;
  in

  if   (builtins.isString value-dynamic && "" != value-dynamic)
  then value-dynamic
  else value-static;

#------------------------------------------------#
in
##################################################

import file arguments

##################################################

# Local Variables:
# compile-command: "home-manager -f ~/configuration/configs/nixpkgs/home-noattrs.nix build"
# End:














#   $ nix-instantiate --eval -E 'let home = import /home/sboo/configuration/configs/nixpkgs/home-attrs.nix; in (builtins.trace (builtins.toString (builtins.attrNames home)) null)' 1>& 2 2>& 1
#   trace: darwin default emacs full linux programs small
#
# 











_home-manager_list_nix_attributes ()

{
    local HomeFile
    local HomeAttrsString
    local HomeAttrsArray
    local HomeAttr

    HomeFile=$(readlink -f "$(_home-manager_get_home_file)")

    HomeAttrsString=$(nix-instantiate --eval -E "let home = import ${HomeFile}; in (builtins.trace (builtins.toString (builtins.attrNames home)) null)" |& grep '^trace: ')
    HomeAttrsString="${HomeAttrsString#trace: }"

    IFS=" " read -ar HomeAttrsArray <<< "${HomeAttrsString}"

    local HomeAttr
    for HomeAttr in "${HomeAttrsArray[@]}"
    do
        echo "${HomeAttr}"
    done | sort 

}














CompletionDirectory="${XDG_DATA_HOME:-$HOME/.local/share}"/bash/completions
CompletionFiles="${XDG_DATA_HOME:-$HOME/.local/share}"/bash/completions/*



















 h = "( rm -fr ~/.cabal/packages/hackage.mobilehaskell/ ) ; ${cabal} new-build all";   # build {a}ll












































































































































































































































































































































