






0


1



Given the issues (or my issues) with `systemd` and the `services.*` modules, I've been thinking of an alternative (and/or parallel) approach:

Generate partially-applied aliases. i.e. of `nix`-provided programs applied to `nix`-generated configurations (as long as the command can properly parse arbitrarily-unordered options.)

e.g.:

```
alias hm-xbindkeys=/nix/store/...-xbindkeys/bin/xbindkeys -fg /nix/store/...-xbindkeysrc/xbindkeysrc.scm
```

such that i can run (any of):

```
$ hm-xbindkeys 
$ hm-xbindkeys --no-daemon 
$ hm-xbindkeys -v
$ hm-xbindkeys -v --no-daemon 
```

myself. either manually (from the command line) or scripted (in `.desktop` or `.service` files whose content can remain constant).

Some questions:

* Does feel wrong to you w.r.t. Home Manager? I use this patterns in a dozen shell `alias`es; and it seems similar to the `*-wrapped` aliases provided by `nixpkgs`.
* Should the scripts be namespaced under Home Manager, or under the program? i.e. `hm-xbindkeys-start` or `.xbindkeys-wrapped`? (I prefer `hm-*`, to distinguish `<home-manager>` from `<nixpkgs>`.)

Personally, I find this very useful, and so official support (plus porting over further programs from other contributors) is pretty attractive to me.



2



<https://superuser.com/questions/1238471/systemd-error-executable-path-is-not-absolute>






























(1)

[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=/usr/bin/emacs --daemon
ExecStop=/usr/bin/emacsclient --eval "(kill-emacs)"
Environment=SSH_AUTH_SOCK=%t/keyring/ssh
Restart=on-failure

[Install]
WantedBy=default.target








1

/etc/systemd/system/xbindkeys.service:

[Unit]
Description=ROT13 demo service
After=network.target
StartLimitIntervalSec=0
[Service]
Type=simple
Restart=always
RestartSec=1
User=centos
ExecStart=

[Install]
WantedBy=multi-user.target



2

"systemd/user/emacs.service" = ./emacs.service




3

``` nix
```

1

pandoc --print-highlight-style haddock.theme > sboo.theme
pandoc --print-highlight-style tango.theme > sboo.theme
pandoc --print-highlight-style kate.theme > sboo.theme

 sboo-pandoc = ''pandoc --highlight-style sboo.theme '';

2

eval "$(pandoc --bash-completion)"

echo '# $ pandoc --bash-completion >> ./share/bash-completion/pandoc.bash' > ./share/bash-completion/pandoc.bash

pandoc --bash-completion >> ./share/bash-completion/pandoc.bash


../../../../share/bash-completion/pandoc.bash






3

? share/bash-completion/
? bash/completion/

4




install ./skeletor ~/bin/skeletor
install share ...


5





































`<home-manager>/modules/fontconfig.nix`

**fontconfig: generate font cache files**

`fonts.fontconfig.enable`

``` nix
  options = {

    fonts.fontconfig = {
      enable = mkOption {
        type = types.bool;
        default = false;
        description = ''
          Whether to enable fontconfig configuration. This will, for
          example, allow fontconfig to discover fonts installed
          through <varname>home.packages</varname> and
          <command>nix-env</command>.
        '';
      };
    };
  };
```

configuring command:

``` nix
   home.extraProfileCommands = ''

      export FONTCONFIG_FILE=$(pwd)/fonts.conf


      cat > $FONTCONFIG_FILE << EOF
      <?xml version='1.0'?>
      <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
      <fontconfig>
        <dir>$out/lib/X11/fonts</dir>
        <dir>$out/share/fonts</dir>
        <cachedir>$out/lib/fontconfig/cache</cachedir>
      </fontconfig>
      EOF

      ${getBin pkgs.fontconfig}/bin/fc-cache
      rm $out/lib/fontconfig/cache/CACHEDIR.TAG
    '';
```

configuration file:

``` nix
   xdg.configFile = {
      "fontconfig/conf.d/10-hm-fonts.conf".text = ''


        <?xml version='1.0'?>
        <!-- Generated by Home Manager. -->
        <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
        <fontconfig>

          <include ignore_missing="yes">${profileDirectory}/etc/fonts/conf.d</include>
          <include ignore_missing="yes">${profileDirectory}/etc/fonts/fonts.conf</include>
          <include ignore_missing="yes">~/.nix-profile/etc/fonts/conf.d</include>
          <include ignore_missing="yes">~/.nix-profile/etc/fonts/fonts.conf</include>
          <cachedir>${profileDirectory}/lib/fontconfig/cache</cachedir>
          <dir>${profileDirectory}/lib/X11/fonts</dir>
          <dir>${profileDirectory}/share/fonts</dir>
          <dir>~/.nix-profile/lib/X11/fonts</dir>
          <dir>~/.nix-profile/share/fonts</dir>


        </fontconfig>
      '';
    };
```






fetchNixpkgs = { rev, sha }:

  builtins.fetchTarball { url = "https://github.com/NixOS/nixpkgs/archive/${rev}.tar.gz"; sha256 = sha; };






visible-mark




sboo-emacs-rescue = ''killall -s USR2 emacs '';






`.gitconfig`:

``` conf
core.excludesfile=.../config/git/global/.gitignore
```

`config/git/global/.gitignore`:

``` conf
...
```




".markdownlint.json".text = 


''
{
    "MD013": {
        "line_length": 80,
        "code_blocks": false,
        "tables": false
    }
}
'';





Download network-manager in a device having internet connection from http://security.ubuntu.com/ubuntu/pool/main/n/network-manager/

    network-manager_1.2.2-0ubuntu0.16.04.4_amd64.deb






auto eth0
iface eth0 inet static
    address x.x.x.x
    gateway y.y.y.y
    netmask z.z.z.z
    network a.a.a.a
    broadcast b.b.b.b
    dns-nameserver c.c.c.c d.d.d.d


e.g. open `/etc/network/interfaces` to add:

``` conf
auto enp0s3
iface enp0s3 inet static
        address 10.1.1.83
        netmask 255.0.0.0
        gateway 10.1.1.1
        dns-nameservers 8.8.8.8 8.8.4.4
```

then save `/etc/network/interfaces` and either:

* reboot the system; or
* restart the network subsystem via:

        $ sudo ip a flush enp0s3
        $ sudo systemctl restart networking.service



.

## `nmap`

```
$ nmap -sA 192.168.1.0/24 nmap
```

* `127.0.0.0/24` specifies the range `127.0.0.0 - 127.0.0.255`
127.0.0.0/20 specifies the range 127.0.0.0 - 127.0.15.255
127.0.0.0/16 specifies the range 127.0.0.0 - 127.0.255.255

.

https://raspberrypi.stackexchange.com/questions/37920/how-do-i-set-up-networking-wifi-static-ip-address/74428#74428



.







sudo dhclient eth0

sudo apt-get install network-manager

.

sudo apt-get install --reinstall network-manager

/var/cache/apt/archives/

.

 /etc/network/interface file to setup a manual IP for eth0.

# interfaces(5) file used by ifup(8) and ifdown(8)
auto lo


iface lo inet loopback

# below are my changes

auto eth0
iface eth0 inet static
    address x.x.x.x
    gateway y.y.y.y
    netmask z.z.z.z
    network a.a.a.a
    broadcast b.b.b.b
    dns-nameserver c.c.c.c d.d.d.d


.



.

Solution First downloaded appropriate network manager deb file on another computer (32bit/i386 for me)(mine was network-manager_1.2.2-OubuntuO,16.04.4_i386.deb) moved file across to ubuntu system laptop using memory card

.

Just solved this same problem, follow these simple steps:

1. Download network-manager in a device having internet connection from http://security.ubuntu.com/ubuntu/pool/main/n/network-manager/ . I ran

    network-manager_1.2.2-0ubuntu0.16.04.4_amd64.deb

for ubuntu16.04

2. Then transfer this file using USB or phone etc.

$ Run

    sudo dpkg -i network-manager_1.2.2-0ubuntu0.16.04.4_amd64.deb

.








https://wiki.archlinux.org/index.php/NetworkManager

/etc/sysconfig/network-scripts/ifcfg-eth0 file on the HWADDR=








XMODMAP

  systemd.user = {

    services = {

      setxkbmap.Service.ExecStart = lib.mkForce "${pkgs.coreutils}/bin/true";

    };

  };














https://stackoverflow.com/questions/33829444/passing-bash-array-to-python-list

When you export a variable from the shell, what you are really doing is adding it to the POSIX "environment" array that all child processes inherit. But the POSIX environment is a flat array of name=value strings; it cannot itself contain arrays. So Bash doesn't even attempt to put arrays there. It will let you export an array variable, and doing so even sets the "exported" flag on that variable, but the environment is not touched. You can verify this fact by running env or a new copy of bash and looking for the "exported" variable:

$ export myArr=(this is an array)
$ bash -c 'echo "${myArr[@]}"'

$

(Some other array-having shells, notably ksh, wil

Some other array-having shells, notably ksh, will actually export an array variable to the environment, but the exported value will consist of only the first element of the array.)

If you want to pass a shell array to the Python script, your best bet is to do so as command line arguments. If you run the Python script like this:

python code.py "${mdcNo[@]}"
... then the Python code can just loop over sys.argv, which is always a list. (Specifically, the passed-in array will be the slice sys.argv[1:], since sys.argv[0] is always set to the name of the script itself.)

If that's not an option, then you'll have to set the environment variable to a string with some delimiter between elements and split it inside the Python code. Something like this..

Bash:

export mdcList='0021,0022,0036,0055,0057,0059,0061,0062,0063,0065,0066,0086,0095,0098,0106,0110,0113,0114,0115,0121,0126,0128,0135,0141,0143,0153,0155,0158'
Or you can build the string up from the array:

export mdcList=${mdcNo[0]}
for i in "${mdcNo[@]:1}"; do
   mdcList+=,$i
done
Either way, the Python script can recover the array as a list like this:

mdc_no = os.getenv('mdcList').split(',')
If your array elements aren't just numbers, you can replace the comma with something less likely to show up in an element; the traditional choice would be the ASCII Unit Separator (U+001F, $'\x1f' in Bash, '\x1f' in Python).






convert  -background transparent  image.png  -define icon:auto-resize=16,32,48,64,256  favicon.ico



# (Templates)

## (NixOS Option)

* ``:

    * description: .
    * default: `""`
    * type: `string`

* ``:

    * description: .
    * default: `0`
    * type: `int`

## 







## NixOS & xkb

```nix
services.xserver.xkbDir
services.xserver.xkbModel
services.xserver.xkbOptions
services.xserver.xkbVariant
```

`xserver.xkbModel`:

* description: keyboard model.
* default: `"pc104"`
* type: `string`

`xserver.`:

* description: X Keyboard Options (e.g. layout switching).
* default: `"terminate:ctrl_alt_bksp"`
* type: `string`


## 










https://stackoverflow.com/questions/1475111/retrieving-the-first-non-option-command-line-argument



chrome extension: quicktab




# `jsonnet`

## Example

```
jsonnet fmt --indent 2 --max-blank-lines 2 --sort-imports --string-style s --comment-style s tilestache-config.jsonnet -i
```

## 







chrome extension: quicktab
jsonnet fmt --indent 2 --max-blank-lines 2 --sort-imports --string-style s --comment-style s tilestache-config.jsonnet -i






>After you made a change, execute xbindkeys `--poll-rc` to reload the configuration file and apply the changes.

To identify mouse buttons, xev can be used.

https://blog.hanschen.org/2009/10/13/mouse-shortcuts-with-xbindkeys/

With this modified script, if you press the key combination fast enough your Super_L key will remain 'on' till the next time you hit it, which may result in some interesting side-effects. Just tap it again to remove that state, or use the original script if you want things to 'just work' and do not mind not multi-tapping on volume up/down.



(load "config.scm")




>If the command for a keybind works via the xdotool in command line, but not when activated by the hotkey try adding "+ Release" to the hotkey (Esp notable on gnome):

```
"xdotool key --clearmodifiers XF86AudioPlay"
    Mod2 + F7 + Release
```

>This will make the F7 key play/pause audio. Where the "xdotool" command would work in commandline, if the "+ Release" is removed it will fail with xbindkeys.

 (map (lambda (key)
         (cond
          [(equal? 'control key) "control"]
          [(equal? 'shift key) "shift"]
          [(equal? 'alt key) "alt"]))










https://github.com/zenozeng/color-hash/blob/master/README.md

for syntax-highlighting individual words with distinct colors

```js
var colorHash = new ColorHash();

// in HSL:
//
// Hue ∈ [0, 360)
// Saturation ∈ [0, 1]
// Lightness ∈ [0, 1]


colorHash.hsl('Hello World'); // [ 225, 0.65, 0.35 ]

// in RGB:
//
// R, G, B ∈ [0, 255]


colorHash.rgb('Hello World'); // [ 135, 150, 197 ]

// in HEX:


colorHash.hex('Hello World'); // '#8796c5'
```

>Though LAB is more perceptually uniform, HSL is easier to control. Simply sets lightness and saturation and change hue uniformly can generate uniform colors.













xfce4 show modifier





    (let* ((PACKAGE-COUNT ())
   (PROGRESS-REPORTER
            (make-progress-reporter "Building packages..." 0 PACKAGE-COUNT 0 nil 1))
  )

       (dotimes (k 500)
         (sit-for 0.01)
         (progress-reporter-update PROGRESS-REPORTER k))

       (progress-reporter-done PROGRESS-REPORTER))



;; `make-progress-reporter':
;;
;; (make-progress-reporter MESSAGE &optional MIN-VALUE MAX-VALUE CURRENT-VALUE MIN-CHANGE MIN-TIME)






another method is environment variables:

    (if (not (null (getenv "VFCLISTS_USE_EXWM"))) (use-package ...)) 

`VFCLISTS_USE_EXWM` is false if unset or set to the empty string. it can be set when you launch emacs:

    VFCLISTS_USE_EXWM=1 emacs &disown

if you launch emacs graphically (like by clicking on its icon in the toolbar, or when do you open a file whose file extension that will be handled by your editor, or when its autostarted etc), you can add this behavior to its `.desktop` file (assuming your Window Manager supports Desktop Actions).

original Desktop Entry File (should be named `emacs.desktop`, and it should be under the `~/.local/share/applications/` directory; you can make a new one if none exists):

   [Desktop Entry]
   Version=1.0
   Type=Application
   Name=emacs
   Exec=/usr/bin/emacs --maximized
   Icon=emacs
   StartupWMClass=Emacs

Desktop Entry File with "toggleable" environment variables (the key lines being the ones that start with `Exec=`):

   [Desktop Entry]
   Version=1.0
   Type=Application
   Name=emacs
   Exec=/usr/bin/emacs --maximized
   Icon=emacs
   StartupWMClass=Emacs
   Actions=exwm;

   [Desktop Action exwm]
   Name=【EXWM】emacs with exwm
   Exec=VFCLISTS_USE_EXWM=1 /usr/bin/emacs --maximized

now, by right-clicking on the application icon which would launch emacs by left-clicking on it, a menu should pop up will have a new item named "【EXWM】emacs with exwm". (on KDE and GNOME, afaict XFCE ignores Desktop Actions; also my `Exec` syntax may be wrong, maybe an `export` is needed like so: `export VFCLISTS_USE_EXWM=1`).

you can do similar things in Windows by right clicking on the Shortcut Link and editing the `Target` field of its Properties. and I assume OS X has something similar.

(ignore this if you're not familiar with bash scripting or the command line).






https://github.com/iridakos/goto/archive/v1.2.3.tar.gz

https://github.com/iridakos/goto.git

https://github.com/iridakos/goto/blob/master/goto.sh







xfce4-terminal = /usr/xfce4-terminal;

''${xfce4-terminal}/colorschemes/solarized-light.theme'';









#!/bin/bash
emacsclient --create-frame -nw --alternate-editor="" --eval "(man \"$*\")"


« --alternate-editor="" » — if there's no server, it'll start one (`M-x server-start`).

>After failing to set Emacs as the default pager for man, I realized that something like that might be trivial for emacsclient. With a little help from Google, I was able to concoct a script to call Emacs Man-mode with a command line parameter.

>The shell command

$ man 4 random


>as opposed to random(3) or random(7) should be given in emacs as

(man "4 random")


>Your script needs some extra code to deal with that, maybe just $* instead of $1 or you could get fancier.






## Themes

### Inverse-Dark Themes

i.e. seems that looks dark (and good) when inverted (e.g. by `xrandr-invert-colors`).

### Solarized

<https://github.com/solarized/xresources/blob/master/README.md>

<https://github.com/sgerrand/xfce4-terminal-colors-solarized/blob/master/README.md>

### 


















* Solarized for XResources (e.g. XTerm) — <https://github.com/solarized/xresources>

.Xresources






enableCabalFlags = flags: drv: builtins.foldl' (d: flag: pkgs.haskell.lib.enableCabalFlag d flag) drv flags;
  setStackFlags = drv:
    if release
      then enableCabalFlags [ "hide-dependency-versions" "supported-build" ] drv
      else drv;
  # Builds a static stack executable from a `stack.nix` file generated
  # with `stack2nix`.
  static_stack = setStackFlags (import ../survey/default.nix {
    normalPkgs = pkgs;
    normalHaskellPackages = import stack2nix-output {
      inherit pkgs;
    };
  }).haskellPackages.stack;







otool





$ ldd /usr/bin/ppdhtml | awk '/ => / { print $1 }'


libcupsppdc.so.1


'lib(\w+)+.so[.\d]'

cupsppdc





 # Arguments given to the script are given to `nix-build`.
  build-script =
    pkgs.writeScript "stack-build-script.sh" ''
      #!/usr/bin/env bash
      set -eu -o pipefail
      set -x
      ${normalPkgs.nix}/bin/nix-build --no-out-link -A static_stack $@
    '';













DAG

The main issue I had with the DAG was that a handful of filters need to run before anything else, and another handful need to run after everything else. By introducing a skeleton of dummy nodes in the graph, this is in fact easy.

# skeleton
begin = dag.entryAnywhere { ... }
filters = dag.entryAfter [ "begin" ] { ... }
last = dag.entryAfter [ "filters" ] { ... }

# begin
spam = dag.entryAfter [ "begin" ] { class = "SpamFilter"; }
spam = dag.entryAfter [ "begin" ] { class = "KillThreadsFilter"; }

# filters
someFilter = dag.entryAfter [ "filters" ] { class = "Filter"; parameters = { foo = "bar"; }; }
otherFilter = dag.entryAfter [ "someFilter" ] { class = "Filter"; parameters = { foo = "bar"; }; }

# last
inbox = dag.entryAfter [ "last" ] { class = "InboxFilter"; }


i need to figure out what the implementation of the dummy node is, I guess a dummy filter that just outputs a message to the afew log would be OK.




Read from stdin, specify the language explicitly

> yaml2json .travis.yml | json_pp | bat -l json
Show and highlight non-printable characters:

> bat -A /etc/hosts
Use it as a cat replacement:

bat > note.md  # quickly create a new file

bat header.md content.md footer.md > document.md

bat -n main.rs  # show line numbers (only)

bat f - g  # output 'f', then stdin, then 'g'.









new-exec
--

compgen -A command 




-F function
The shell function function is executed in the current shell environment. When it is executed, $1 is the name of the command whose arguments are being completed, $2 is the word being completed, and $3 is the word preceding the word being completed, as described above (see Programmable Completion). When it finishes, the possible completions are retrieved from the value of the COMPREPLY array variable.

-W wordlist
The wordlist is split using the characters in the IFS special variable as delimiters, and each resultant word is expanded. The possible completions are the members of the resultant list which match the word being completed.

-X filterpat
filterpat is a pattern as used for filename expansion. It is applied to the list of possible completions generated by the preceding options and arguments, and each completion matching filterpat is removed from the list. A leading ‘!’ in filterpat negates the pattern; in this case, any completion not matching filterpat is removed.








One-line solution

printf '%s\n' ${myarray[@]} | grep -P '^mypattern$'
Explanation

The printf statement prints each element of the array on a separate line.

The grep statement uses the special characters ^ and $ to find a line that contains exactly the pattern given as mypattern (no more, no less).



#  $ lsb-release -a
#  
#










 (builtins.fetch https://github.com/adetokunbo/haskell-overridez/archive/v0.10.3.1.tar.gz
)







## Links

* <https://stackoverflow.com/questions/11113974/what-is-the-cross-platform-way-of-obtaining-the-path-to-the-local-application-da>
* <https://wiki.archlinux.org/index.php/XDG_user_directories>





































TODO change to "sboo" for consistency with hackage https://github.com/NixOS/nixpkgs/blob/master/maintainers/maintainer-list.nix




add magit to ...

https://github.com/NixOS/nixpkgs/blob/master/pkgs/top-level/emacs-packages.nix

and other executables in jwiggly's config,

https://github.com/jwiegley/nix-config/blob/master/overlays/10-emacs.nix






https://github.com/NixOS/nixpkgs/tree/master/pkgs/tools/typesetting/docbook2x

https://github.com/NixOS/nixpkgs/tree/master/pkgs/tools/typesetting/docbook2odf






https://github.com/DavidEGrayson/nixcrpkgs





https://github.com/input-output-hk/nix-hs-hello-windows



time nix build -f channel:nixos-unstable pkgsCross.mingw32.hello && time nix run -f channel:nixos-unstable wine -c ./result/bin/hello.exe



Windows
$ nix build -f channel:nixos-unstable pkgsCross.mingw32.hello
$ nix run -f channel:nixos-unstable wine -c ./result/bin/hello.exe
Hello, world!


Android
$ nix build -f channel:nixos-unstable \
      pkgsCross.aarch64-android-prebuilt.curl


iPhone3
$ nix build -f channel:nixos-unstable \
      pkgsCross.iphone64.haskell.packages.jq






 postPatch = ''
    rm -r -f .git/
  '';






TODO add executables to ..

meta = with stdenv.lib; {
    
    executables = [ ]









(use-package webpaste

  :bind (("C-c C-p C-b" . webpaste-paste-buffer)
         ("C-c C-p C-r" . webpaste-paste-region)))

(use-package imgbb

  :defer 2)








https://github.com/sboosali/configuration/blob/master/home-manager/nix/emacs/overrides.nix









tmux








all-the-icons-font-names:

find ./all-the-icons.el/fonts/ -name '*.ttf'

all-the-icons.ttf	
file-icons.ttf
fontawesome.ttf
material-design-icons.ttf
octicons.ttf
weathericons.ttf







all-the-icons-install-fonts:

(require 'pcase)

(let ((font-directory
  (pcase window-system

                        (x  (concat (or (getenv "XDG_DATA_HOME")            ;; Default Linux install directories
                                        (concat (getenv "HOME") "/.local/share"))
                                    "/fonts/"))

                        (mac (concat (getenv "HOME") "/Library/Fonts/" ))

                        (ns (concat (getenv "HOME") "/Library/Fonts/" ))))  ;; Default MacOS install directory

(unless (file-directory-p font-dest) (mkdir font-dest t))


(mapc (lambda (font)
              (url-copy-file (format url-format font) (expand-file-name font font-dest) t))
            all-the-icons-font-names)





















nixpkgs.config

nixpkgs.overlays







mdcd


de; mdcd jwiegley/elisp

wget https://github.com/NixOS/nixpkgs/blob/a6050ab9d0e2e5b37bb64328ed44328af3b8ec40/pkgs/applications/editors/emacs/site-start.el#L40



mdcd overlays/emacs/

wget https://github.com/jwiegley/nix-config/blob/master/overlays/emacs/builder.nix

builder.nix






de; mdcd jwiegley/nix/overlays/emacs/




overrides.nix <<EOF

self: super:

let

myEmacsPackageOverrides

in

EOF






lib.nix <<EOF

pkgs: 

let

inherit (pkgs) fetchurl fetchgit fetchFromGitHub;
inherit (pkgs) stdenv;

inherit (stdenv) lib mkDerivation;

      withPatches = pkg: patches:

        lib.overrideDerivation pkg (attrs: { inherit patches; });

      withPatch = pkg: patch:

         withPatches pkg [ patch ];

      addBuildInputs = pkg: inputs:

      pkg.overrideAttrs (attrs: {
        buildInputs = attrs.buildInputs ++ inputs;
      });


    addBuildInput = pkg: input:


      addBuildInputs pkg [ input ];

      addTool = pkg: inputs: pkg.overrideAttrs (attrs: {
        buildInputs = attrs.buildInputs ++ inputs;
      });

      compileEmacsFiles = 

      pkgs.callPackage ./emacs/builder.nix;

      compileLocalFile = name:

    compileEmacsFiles {
        inherit name;
        src = ./emacs + ("/" + name);
     };

      fetchFromEmacsWiki = pkgs.callPackage ({ fetchurl, name, sha256 }:

        fetchurl {
          inherit sha256;
          url = "https://www.emacswiki.org/emacs/download/" + name;
        });

      compileEmacsWikiFile = { name, sha256, buildInputs ? [], patches ? [] }:

        compileEmacsFiles {
          inherit name buildInputs patches;
          src = fetchFromEmacsWiki { inherit name sha256; };
        };

in




EOF






de; mdcd pkgs/applications/editors/emacs/

t site-start.el
e site-start.el

(defun nix--profile-paths ()
  "Returns a list of all paths in the NIX_PROFILES environment
variable, ordered from more-specific (the user profile) to the
least specific (the system profile)"
  (reverse (split-string (or (getenv "NIX_PROFILES") ""))))

;;; Extend `load-path' to search for elisp files in subdirectories of
;;; all folders in `NIX_PROFILES'. Also search for one level of
;;; subdirectories in these directories to handle multi-file libraries
;;; like `mu4e'.'
(require 'seq)
(let* ((subdirectory-sites (lambda (site-lisp)
                             (when (file-exists-p site-lisp)
                               (seq-filter (lambda (f) (file-directory-p (file-truename f)))
                                           ;; Returns all files in `site-lisp', excluding `.' and `..'
                                           (directory-files site-lisp 'full "^\\([^.]\\|\\.[^.]\\|\\.\\..\\)")))))
       (paths (apply #'append
                     (mapcar (lambda (profile-dir)
                               (let ((site-lisp (concat profile-dir "/share/emacs/site-lisp/")))
                                 (cons site-lisp (funcall subdirectory-sites site-lisp))))
                             (nix--profile-paths)))))
  (setq load-path (append paths load-path)))


;;; Make `woman' find the man pages
(eval-after-load 'woman
  '(setq woman-manpath
         (append (mapcar (lambda (x) (concat x "/share/man/"))
                         (nix--profile-paths))
                 woman-manpath)))

;;; Make tramp work for remote NixOS machines
(eval-after-load 'tramp-sh
  ;; TODO: We should also add the other `NIX_PROFILES' to this path.
  ;; However, these are user-specific, so we would need to discover
  ;; them dynamically after connecting via `tramp'
  '(add-to-list 'tramp-remote-path "/run/current-system/sw/bin"))

;;; C source directory
;;;
;;; Computes the location of the C source directory from the path of
;;; the current file:
;;; from: /nix/store/<hash>-emacs-<version>/share/emacs/site-lisp/site-start.el
;;; to:   /nix/store/<hash>-emacs-<version>/share/emacs/<version>/src/
(let ((emacs
       (file-name-directory                      ; .../emacs/
        (directory-file-name                     ; .../emacs/site-lisp
         (file-name-directory load-file-name)))) ; .../emacs/site-lisp/
      (version
       (file-name-as-directory
        (concat
         (number-to-string emacs-major-version)
         "."
         (number-to-string emacs-minor-version))))
      (src (file-name-as-directory "src")))
  (setq find-function-C-source-directory (concat emacs version src)))









de; mdcd jwiegley/elisp

wget https://github.com/jwiegley/nix-config/blob/master/overlays/emacs/edit-env.el

wget https://github.com/jwiegley/nix-config/blob/master/overlays/emacs/edit-var.el

wget https://github.com/jwiegley/nix-config/blob/master/overlays/emacs/site-start.el











https://github.com/jwiegley/nix-config/blob/master/config/emacs.nix

de; mdcd jwiegley/nix/overlays; 

wget https://github.com/jwiegley/nix-config/blob/master/overlays/10-emacs.nix





de; mdcd jwiegley/nix/config; 

.nix <<EOF

EOF


wget https://raw.githubusercontent.com/jwiegley/nix-config/master/config/emacs.nix

wget https://raw.githubusercontent.com/jwiegley/nix-config/master/config/packages.nix

darwin.nix <<EOF

  environment = {
    systemPackages = import ./packages.nix { inherit pkgs; };

    systemPath = [
      "${pkgs.Docker}/Applications/Docker.app/Contents/Resources/bin"
    ];

    variables = {
      HOME_MANAGER_CONFIG = "${home_directory}/src/nix/config/home.nix";

      MANPATH = [
        "${home_directory}/.nix-profile/share/man"
        "${home_directory}/.nix-profile/man"
        "${config.system.path}/share/man"
        "${config.system.path}/man"
        "/usr/local/share/man"
        "/usr/share/man"
        "/Developer/usr/share/man"
        "/usr/X11/man"
      ];

      PYTHONPATH   = "${pkgs.dirscan}/libexec";
      LC_CTYPE     = "en_US.UTF-8";
      LESSCHARSET  = "utf-8";
      LEDGER_COLOR = "true";
      PAGER        = "less";

      TERM = "xterm-256color";
    };

    shellAliases = {
      rehash = "hash -r";
    };

    pathsToLink = [ "/info" "/etc" "/share" "/include" "/lib" "/libexec" ];


etc."DefaultKeyBinding.dict".text = ''
      {
        "~f"    = "moveWordForward:";
        "~b"    = "moveWordBackward:";
        "~d"    = "deleteWordForward:";
        "~^h"   = "deleteWordBackward:";
        "~\010" = "deleteWordBackward:";    /* Option-backspace */
        "~\177" = "deleteWordBackward:";    /* Option-delete */
        "~v"    = "pageUp:";
        "^v"    = "pageDown:";
        "~<"    = "moveToBeginningOfDocument:";
        "~>"    = "moveToEndOfDocument:";
        "^/"    = "undo:";
        "~/"    = "complete:";
        "^g"    = "_cancelKey:";
        "^a"    = "moveToBeginningOfLine:";
        "^e"    = "moveToEndOfLine:";
        "~c"	  = "capitalizeWord:"; /* M-c */
        "~u"	  = "uppercaseWord:";	 /* M-u */
        "~l"	  = "lowercaseWord:";	 /* M-l */
        "^t"	  = "transpose:";      /* C-t */
        "~t"	  = "transposeWords:"; /* M-t */
      }
    '';

};


};



  services.nix-daemon.enable = true;
  services.activate-system.enable = true;



  nix = {
    package = pkgs.nixStable;

    # useSandbox = true;
    # sandboxPaths = [
    #   "/usr/lib"
    #   "/System/Library/Frameworks"
    #   "/dev"
    #   "/bin/sh"
    # ];

    nixPath =
      [ "darwin-config=$HOME/src/nix/config/darwin.nix"
        "home-manager=$HOME/src/nix/home-manager"
        "darwin=$HOME/src/nix/darwin"
        "nixpkgs=$HOME/src/nix/nixpkgs"
        "ssh-config-file=$HOME/.ssh/config"
        "ssh-auth-sock=$HOME/.config/gnupg/S.gpg-agent.ssh"
      ];

    trustedUsers = [ "johnw" "@admin" ];

    trustedBinaryCaches = [
    ];
    binaryCaches = [
    ];
    binaryCachePublicKeys = [
      "newartisans.com:RmQd/aZOinbJR/G5t+3CIhIxT5NBjlCRvTiSbny8fYw="
      "hydra.oregon.dfinity.build-2:KMTixHrh9DpAjF/0xU/49VEtNuGzQ71YaVIUSOLUaCM="
    ];

    extraOptions = ''
      secret-key-files = ${home_directory}/.config/gnupg/nix-signing-key.sec
    '';
  } // {

  };
EOF









git.nix <<EOF

EOF
git = {
      enable = true;

      userName  = "John Wiegley";
      userEmail = "johnw@newartisans.com";

      signing = {
        key = "C144D8F4F19FE630";
        signByDefault = true;
      };

      aliases = {
        amend      = "commit --amend -C HEAD";
        authors    = "!\"${pkgs.git}/bin/git log --pretty=format:%aN"
                   + " | ${pkgs.coreutils}/bin/sort"
                   + " | ${pkgs.coreutils}/bin/uniq -c"
                   + " | ${pkgs.coreutils}/bin/sort -rn\"";
        b          = "branch --color -v";
        ca         = "commit --amend";
        changes    = "diff --name-status -r";
        clone      = "clone --recursive";
        co         = "checkout";
        cp         = "cherry-pick";
        dc         = "diff --cached";
        dh         = "diff HEAD";
        ds         = "diff --staged";
        from       = "!${pkgs.git}/bin/git bisect start && ${pkgs.git}/bin/git bisect bad HEAD && ${pkgs.git}/bin/git bisect good";
        ls-ignored = "ls-files --exclude-standard --ignored --others";
        rc         = "rebase --continue";
        rh         = "reset --hard";
        ri         = "rebase --interactive";
        rs         = "rebase --skip";
        ru         = "remote update --prune";
        snap       = "!${pkgs.git}/bin/git stash"
                   + " && ${pkgs.git}/bin/git stash apply";
        snaplog    = "!${pkgs.git}/bin/git log refs/snapshots/refs/heads/"
                   + "\$(${pkgs.git}/bin/git rev-parse HEAD)";
        spull      = "!${pkgs.git}/bin/git stash"
                   + " && ${pkgs.git}/bin/git pull"
                   + " && ${pkgs.git}/bin/git stash pop";
        su         = "submodule update --init --recursive";
        undo       = "reset --soft HEAD^";
        w          = "status -sb";
        wdiff      = "diff --color-words";
        l          = "log --graph --pretty=format:'%Cred%h%Creset"
                   + " —%Cblue%d%Creset %s %Cgreen(%cr)%Creset'"
                   + " --abbrev-commit --date=relative --show-notes=*";
      };

      extraConfig = {
        core = {
          editor            = "${pkgs.emacs26}/bin/emacsclient -s ${tmp_directory}/emacs501/server";
          trustctime        = false;
          fsyncobjectfiles  = true;
          pager             = "${pkgs.less}/bin/less --tabs=4 -RFX";
          logAllRefUpdates  = true;
          precomposeunicode = false;
          whitespace        = "trailing-space,space-before-tab";
        };

        branch.autosetupmerge = true;
        commit.gpgsign        = true;
        github.user           = "jwiegley";
        credential.helper     = "${pkgs.pass-git-helper}/bin/pass-git-helper";
        ghi.token             = "!${pkgs.pass}/bin/pass api.github.com | head -1";
        hub.protocol          = "${pkgs.openssh}/bin/ssh";
        mergetool.keepBackup  = true;
        pull.rebase           = true;
        rebase.autosquash     = true;
        rerere.enabled        = true;

        "merge \"ours\"".driver   = true;
        "magithub \"ci\"".enabled = false;

        http = {
          sslCAinfo = "${ca-bundle_crt}";
          sslverify = true;
        };

        color = {
          status      = "auto";
          diff        = "auto";
          branch      = "auto";
          interactive = "auto";
          ui          = "auto";
          sh          = "auto";
        };

        push = {
          default = "tracking";
          recurseSubmodules = "check";
        };

        "merge \"merge-changelog\"" = {
          name = "GNU-style ChangeLog merge driver";
          driver = "${pkgs.git-scripts}/bin/git-merge-changelog %O %A %B";
        };

        merge = {
          conflictstyle = "diff3";
          stat = true;
        };

        "color \"sh\"" = {
          branch      = "yellow reverse";
          workdir     = "blue bold";
          dirty       = "red";
          dirty-stash = "red";
          repo-state  = "red";
        };

        annex = {
          backends = "SHA512E";
          alwayscommit = false;
        };

        "filter \"media\"" = {
          required = true;
          clean = "${pkgs.git}/bin/git media clean %f";
          smudge = "${pkgs.git}/bin/git media smudge %f";
        };

        submodule = {
          recurse = true;
        };

        diff = {
          ignoreSubmodules = "dirty";
          renames = "copies";
          mnemonicprefix = true;
        };

        advice = {
          statusHints = false;
          pushNonFastForward = false;
        };

        "filter \"lfs\"" = {
          clean = "${pkgs.git-lfs}/bin/git-lfs clean -- %f";
          smudge = "${pkgs.git-lfs}/bin/git-lfs smudge --skip -- %f";
          required = true;
        };

        "url \"git://github.com/ghc/packages-\"".insteadOf
          = "git://github.com/ghc/packages/";
        "url \"http://github.com/ghc/packages-\"".insteadOf
          = "http://github.com/ghc/packages/";
        "url \"https://github.com/ghc/packages-\"".insteadOf
          = "https://github.com/ghc/packages/";
        "url \"ssh://git@github.com/ghc/packages-\"".insteadOf
          = "ssh://git@github.com/ghc/packages/";
        "url \"git@github.com:/ghc/packages-\"".insteadOf
          = "git@github.com:/ghc/packages/";
      };

      ignores = [
        "#*#"
        "*.a"
        "*.aux"
        "*.dylib"
        "*.elc"
        "*.glob"
        "*.la"
        "*.o"
        "*.so"
        "*.v.d"
        "*.vo"
        "*~"
        ".clean"
        ".direnv"
        ".envrc"
        ".envrc.override"
        ".ghc.environment.x86_64-darwin-*"
        ".makefile"
        "TAGS"
        "cabal.project.local"
        "dist-newstyle"
        "result"
        "result-*"
        "tags"
      ];
    };
EOF



ssh.nix <<EOF
ssh = {
      enable = true;

      controlMaster  = "auto";
      controlPath    = "${tmp_directory}/ssh-%u-%r@%h:%p";
      controlPersist = "1800";

      forwardAgent = true;
      serverAliveInterval = 60;

      hashKnownHosts = true;
      userKnownHostsFile = "${xdg.configHome}/ssh/known_hosts";

      matchBlocks =
        let onHost = _: hostname: { inherit hostname; } //
          (if "${localconfig.hostname}" == "vulcan" then {} else {
             proxyJump = "vulcan";
           }); in
        (if "${localconfig.hostname}" == "vulcan" then {
           vulcan.hostname = "192.168.1.69";
         } else {
           vulcan = {
             hostname = "76.234.69.149";
             port = 2201;
             extraOptions = {
               "LocalForward" = "5999 127.0.0.1:5900";
             };
           };
         }) // rec {
        hermes  = onHost "vulcan" "192.168.1.65";
        fin     = onHost "vulcan" "192.168.1.80"; tank = fin;
        nixos   = onHost "vulcan" "192.168.118.128";
        dfinity = onHost "vulcan" "192.168.118.129";
        macos   = onHost "vulcan" "192.168.118.130";

        # This requires a VPN connection to the DFINITY network.
        macmini = {
          hostname = "10.129.1.161";
          user = "dfinity";
          proxyJump = "hydra";
        };

        router = { hostname = "192.168.1.2"; user = "root"; };

        id_local = {
          host = lib.concatStringsSep " " [
            "fiat" "hermes" "home" "mac1*" "macos*" "nixos*" "mohajer" "fin"
            "dfinity" "peta" "smokeping" "tails" "tank" "titan" "ubuntu*"
            "vulcan"
          ];
          identityFile = "${xdg.configHome}/ssh/id_local";
          identitiesOnly = true;
        };

        hydra     = { hostname = "hydra.oregon.dfinity.build"; user = "ec2-user"; };
        smokeping = { hostname = "192.168.1.78"; user = "smokeping"; };
        elpa      = { hostname = "elpa.gnu.org"; user = "root"; };

        haskell_org = { host = "*haskell.org"; user = "root"; };

        savannah.hostname  = "git.sv.gnu.org";
        fencepost.hostname = "fencepost.gnu.org";
        launchpad.hostname = "bazaar.launchpad.net";
        mail.hostname      = "mail.haskell.org";
      };
    };
  };
EOF


xdg.nix <<EOF
xdg = {
    enable = true;

    configHome = "${home_directory}/.config";
    dataHome   = "${home_directory}/.local/share";
    cacheHome  = "${home_directory}/.cache";


configFile."aspell/config".text = ''
      local-data-dir ${pkgs.aspell}/lib/aspell
      data-dir ${pkgs.aspellDicts.en}/lib/aspell
      personal ${xdg.configHome}/aspell/en_US.personal
      repl ${xdg.configHome}/aspell/en_US.repl
    '';




};
EOF


overlays.nix <<EOF

    overlays =
      let path = ../overlays; in with builtins;
      map (n: import (path + ("/" + n)))
          (filter (n: match ".*\\.nix" n != null ||
                      pathExists (path + ("/" + n + "/default.nix")))
                  (attrNames (readDir path)));
  };


EOF



.nix <<EOF

EOF



.nix <<EOF

EOF











wget http://junji-ito-index.tumblr.com/the-index






@dtzWill:

Since I put this together for someone on IRC, here's a command for turning hours of CPU time into a musl-based haskell "Hello World":

$ NIX_PATH=nixpkgs=https://github.com/dtzWill/nixpkgs/archive/feature/ghc-cross-musl.tar.gz nix-build '<nixpkgs>' --arg crossSystem '{config="x86_64-unknown-linux-musl";}' -A haskell.packages.ghc841.hello 








v7 mode;


cd ~/media
git init
git annex init --version=7






http://junji-ito-index.tumblr.com/the-index





Activation Block

```nix
home.activation.linkSomeFiles = config.lib.dag.entryAfter ["writeBoundary"] ''

  ln -s ${toString ./some-file-source} ~/some-file-destination

'';










https://asciinema.org






if [[ "$TERM" == "dumb" ]]
then
  unsetopt zle
  unsetopt prompt_cr
  unsetopt prompt_subst
  if whence -w precmd >/dev/null; then
      unfunction precmd
  fi
  if whence -w preexec >/dev/null; then
      unfunction preexec
  fi
  PS1='$ '
  return
fi





for non-NixOS `home-manager`:

```sh
export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH
```

`${VARIABLE:+VALUE}` is `VALUE` when `VARIABLE` is non-null (i.e. is set & isn't empty).

Non-null variable:

```sh
$ foo="bar"
$ echo ${foo}
bar
$ echo ${foo:+:}
:
$ echo ${foo+:}
:
```










CABAL CONFIG STANZAS

haddock
types.submodule (Haddock)

install-dirs user
types.attrsOf (types.either types.path types.string)

install-dirs global
types.attrsOf (types.either types.path types.string)

program-locations
types.attrsOf (types.either types.path types.string)

program-default-options
types.attrsOf (types.listOf types.string)







--------------------------------------------------

repository hackage.haskell.org
  url: http://hackage.haskell.org/
  -- secure: True
  -- root-keys:
  -- key-threshold: 3

# https://www.haskell.org/cabal/users-guide/installing-packages.html#repository-specification


/*

repository hackage.haskell.org
  url: http://hackage.haskell.org/
  secure: True
  root-keys: <root-key-IDs>
  key-threshold: <key-threshold>


The <root-key-IDs> and <key-threshold> values are used for bootstrapping. As part of the TUF infrastructure the repository will contain a file root.json (for instance, http://hackage.haskell.org/root.json) which the client needs to do verification. However, how can cabal verify the root.json file itself? This is known as bootstrapping: if you specify a list of root key IDs and a corresponding threshold, cabal will verify that the downloaded root.json file has been signed with at least <key-threshold> keys from your set of <root-key-IDs>.


Secure local repositories
If you want to use repositories on your local file system, it is recommended instead to use a secure local repository:

repository my-local-repo
  url: file:/path/to/local/repo
  secure: True
  root-keys: <root-key-IDs>
  key-threshold: <key-threshold>


The layout of these secure local repos matches the layout of remote repositories exactly; the hackage-repo-tool can be used to create and manage such repositories.

*/



--------------------------------------------------

extra-prog-path: /home/sboo/.cabal/bin

extra-lib-dirs:     /home/sboo/.nix-profile/lib/

extra-include-dirs: /home/sboo/.nix-profile/include/

extra-prog-path:    /home/sboo/.nix-profile/bin/
extra-prog-path:    /home/sboo/.nix-profile/libexec/

--------------------------------------------------

-- jobs: $ncpus
-- default-user-config:
-- require-sandbox: False
-- ignore-sandbox: False
-- ignore-expiry: False
-- http-transport:
-- nix: False
remote-repo-cache: /home/sboo/.cabal/packages
-- local-repo:
-- logs-dir: /home/sboo/.cabal/logs
world-file: /home/sboo/.cabal/world
-- store-dir:
-- verbose: 1
-- compiler: ghc
-- cabal-file:
-- with-compiler:
-- with-hc-pkg:
-- program-prefix: 
-- program-suffix: 
-- library-vanilla: True
-- library-profiling:
-- shared:
-- static:
-- executable-dynamic: False
-- profiling:
-- executable-profiling:
-- profiling-detail:
-- library-profiling-detail:
-- optimization: True
-- debug-info: False
-- library-for-ghci:
-- split-sections: False
-- split-objs: False
-- executable-stripping: True
-- library-stripping: True
-- configure-option:
-- user-install: True
-- package-db:
-- flags:
-- extra-include-dirs:
-- deterministic:
-- cid:
-- extra-lib-dirs:
-- extra-framework-dirs:
-- extra-prog-path:
-- instantiate-with:
-- tests: False
-- coverage: False
-- library-coverage:
-- exact-configuration: False
-- benchmarks: False
-- relocatable: False
-- response-files:
-- cabal-lib-version:
-- constraint:
-- preference:
-- solver: modular
-- allow-older: False
-- allow-newer: False
-- documentation: False
-- doc-index-file: $datadir/doc/$arch-$os-$compiler/index.html
-- target-package-db:
-- max-backjumps: 2000
-- reorder-goals: False
-- count-conflicts: True
-- independent-goals: False
-- shadow-installed-packages: False
-- strong-flags: False
-- allow-boot-library-installs: False
-- reinstall: False
-- avoid-reinstalls: False
-- force-reinstalls: False
-- upgrade-dependencies: False
-- index-state:
-- root-cmd:
symlink-bindir: /home/sboo/.cabal/bin
build-summary: /home/sboo/.cabal/logs/build.log
-- build-log:
remote-build-reporting: anonymous
-- report-planning-failure: False
-- per-component: True
-- one-shot: False
-- run-tests:
-- keep-going: False
-- offline: False
-- project-file:
-- username:
-- password:
-- password-command:
-- builddir:


--------------------------------------------------









sboo-emacsclient

#!/bin/bash
set -eu

# An «emacsclient» wrapper.

#




#

# supports opening files at a given position, via a line-number and column-number in filepaths (i.e. an optional colon-separated suffix with only the line-number, or both the line-number and column-number).





https://wiki.archlinux.org/index.php/Xterm

The default Alt key behavior in xterm is a modifier to send eight bit input characters e.g. to insert æ by pressing Alt+f. To make Alt instead send a ^[ (escape) key (as in gnome-terminal and konsole), set

XTerm.vt100.metaSendsEscape: true




Key binding
xterm defines a whole suite of "actions" for manipulating the terminal e.g. copy-selection(), hard-reset(), scroll-back(), etc. These actions can be mapped to mouse/key combinations using the translations resource. For example, you can map Ctrl+M and Ctrl+R to maximize/restore the window:

XTerm.vt100.translations: #override \n\
    Ctrl <Key>M: maximize() \n\
    Ctrl <Key>R: restore()


#override indicates that these bindings should override any existing ones



By default, 1024 lines are saved. You can change the number of saved lines with the saveLines resource,

XTerm.vt100.saveLines: 4096


Other X resources that affect scrolling are jumpScroll, multiScroll, and fastScroll (all under XTerm.vt100



Scrollbar
The scrollbar is not shown by default. It can be enabled and its appearance tweaked through resource settings (note the differing capitalization of "scrollbar"!)

XTerm.vt100.scrollBar: true
XTerm.vt100.scrollbar.width: 24

See xterm(1)for other scrollbar



Tip: If the popup menu windows show only as small boxes, it is probably because you have a line similar to this, XTerm*geometry: 80x32, in your resources file. This does start xterm in an 80 column by 32 row main window, but it also forces the menu windows to be 80 pixels by 32 pixels! This is why you should fully specify the resource:


XTerm.vt100.geometry: 80x32


Some of the menu options are discussed below.


Allow SendEvents allows other processes to send keypress and mouse events to the xterm window. Because of the security risk, do not enable this unless you are very sure you know what you are doing.


NOTE The Quit menu item will also close the xterm window – it is the same as sending a HUP signal.


VT Options menu
Ctrl + MiddleMouse

Select to Clipboard – Normally, selected text is stored in PRIMARY, to be pasted with Shift+Insert or by using the middle mouse button. By toggling this option to on, selected text will use CLIPBOARD, allowing you to paste the text selected in an xterm window into a GUI application using Ctrl+v. The corresponding resource is XTerm.vt100.selectToClipboard.



You can add #Key bindings similar to other terminals' copy/paste behavior (such as gnome terminal):



XTerm.vt100.translations: #override \n\
    Ctrl Shift <Key>C: copy-selection(CLIPBOARD) \n\
    Ctrl Shift <Key>V: insert-selection(CLIPBOARD)
Selecting text \n\
    Ctrl <Key>M: maximize() \n\
    Ctrl <Key>R: restore()




















TODO home manager: config xfce4 via commands instead of files. ditto vbox.







add to TODO...

NOTE:

* `VBoxSVC` owns `~/.config/VirtualBox/`

> On Linux, Oracle VM VirtualBox makes use of a custom version of Mozilla XPCOM (cross platform component object model) for interprocess and intraprocess communication (IPC). The process VBoxSVC serves as a communication hub between different Oracle VM VirtualBox processes and maintains the global configuration, such as the XML database. When starting an Oracle VM VirtualBox component, the processes VBoxSVC and VBoxXPCOMIPCD are started automatically. They are only accessible from the user account they are running under. VBoxSVC owns the Oracle VM VirtualBox configuration database which normally resides in ~/.config/VirtualBox, or the appropriate configuration directory for your operating system. While it is running, the configuration files are locked. Communication between the various Oracle VM VirtualBox components and VBoxSVC is performed through a local domain socket residing in /tmp/.vbox-<username>-ipc. In case there are communication problems, such as an Oracle VM VirtualBox application cannot communicate with VBoxSVC, terminate the daemons and remove the local domain socket directory.













password-commmand:

$ pass www.hackage.com/user/<USERNAME>



$ pass insert Email/zx2c4.com

$ pass
Password Store
├── Email
│   ├── ...
│   └── zx2c4.com


initialize the password-manager (if necessary) via `pass init`:

zx2c4@laptop ~ $ pass init "ZX2C4 Password Storage Key"
mkdir: created directory ‘/home/zx2c4/.password-store’
Password store initialized for ZX2C4 Password Storage Key.
Here, ZX2C4 Password Storage Key is the ID of my GPG key. You can use your standard GPG key or use an alternative one especially for the password store as shown above.

initialize the password (if necessary) via `pass insert`:


$ pass insert www.hackage.com/user/<USERNAME>




   





  colorType = mkOption {

    type = types.str;

    visible = false;

  };

to suppress the individual options from showing up in the documentation. The repetitiveness is not very useful, I think the example suffices to show the available color options.













haddock-hoogle: boolean


Default value:	False


Generate a text file which can be converted by Hoogle into a database for searching. This is equivalent to running <code> haddock --hoogle </code>.

haddock-executables: boolean
Default value:	False
Run haddock on all executable programs.

The command line variant of this flag is --executables (for the haddock subcommand).

haddock-tests: boolean
Default value:	False
Run haddock on all test suites.

The command line variant of this flag is --tests (for the haddock subcommand).

haddock-benchmarks: boolean
Default value:	False
Run haddock on all benchmarks.

The command line variant of this flag is --benchmarks (for the haddock subcommand).

haddock-all: boolean
Default value:	False
Run haddock on all components.

The command line variant of this flag is --all (for the haddock subcommand).

haddock-internal: boolean
Default value:	False
Build haddock documentation which includes unexposed modules and symbols.

The command line variant of this flag is --internal (for the haddock subcommand).







ghc-environment-files-policy 
always, never, ghc-8.4.4+


write-ghc-environment-files: always, never, or ghc-8.4.4+


Default value:	ghc-8.4.4+


Whether a GHC package environment file should be created after a successful build.

Defaults to creating them only when compiling with GHC 8.4.4 and older (GHC 8.4.4 is the first version that supports the -package-env - option that allows ignoring the package environment files).





http-transport: curl, wget, powershell, plain-http 

Default value:	curl







max-backjumps: nat --max-backjumps=N


Default value:	2000


Maximum number of backjumps (backtracking multiple steps) allowed while solving. Set -1 to allow unlimited backtracking, and 0 to disable backtracking completely.





cabal-lib-version: version 

Example: 2.2.0.0










stanzas.packages.
stanzas.repositories.
stanzas.haddock
stanzas.
stanzas.
stanzas.




CONTRIBUTING. md

# Contributing

## Writing Documentation

The markup of `Nix` docstrings is in XML.

(TODO is this true?) Both comments in the source and `description` strings in `option`s use this markup format.

* For code, use the `<code>` tags.

e.g.:

```xml
<code>null</code>
```

* For links, use the `<link>` (self-closing) tag and `href=` attribute:

e.g.:

```xml
See <link xlink:href="https://www.example.org"/>.
```









See <link xlink:href="https://stedolan.github.io/jq/manual/#Colors"/>






xfconf-query -c xfce4-power-manager -p /xfce4-power-manager/lock-screen-suspend-hibernate -s false






2. 

Add the appropriate Home Manager channel.

if you are following Nixpkgs master or an unstable channel, then:

    $ nix-channel --add https://github.com/rycee/home-manager/archive/master.tar.gz home-manager


and if you follow a particular Nixpkgs Channel, like version 18.09, then: 

    $ nix-channel --add https://github.com/rycee/home-manager/archive/release-18.09.tar.gz home-manager


3.  Install Home Manager and create the first Home Manager generation:

    $ nix-shell '<home-manager>' -A install


Once finished, Home Manager should be available in your user environment.

No need to set `programs.home-manager.path` if using home-manager as the channel name.



4 NOTE a binary cache is orthogonal to a channel. a nix-channel is literally a tarball with a `default.nix`.











;; Some scripts written by Mic92:
;; 
;; <https://github.com/Mic92/dotfiles/blob/master/home/.zshrc>



open() {


  if [ -n "${commands[xdg-open]}" ]; then
    xdg-open "$@"


  elif [ -n "${commands[exo-open]}" ]; then
    exo-open "$@"


  elif [ -n "${commands[kde-open5]}" ]; then
    kde-open5 "$@"


  elif [ -n "${commands[gnome-open]}" ]; then
    gnome-open "$@"


  else
    echo "No « *-open » command found." >&2
    return 127
  fi

  # ^ Exit Code « 127 » means "command not found" (e.g. via « illegal_command »)
}










upfind() {
  local previous=
  local current=$PWD

  if [[ $# -ne 1 ]];then
    echo "$0 FILE_NAME"
    return 1
  fi

  while [[ -d $current && $current != $previous ]]; do
    local target_path=$current/$1
    if [[ -f $target_path ]]; then
      echo $target_path
      return 0
    else
      previous=$current
      current=$current:h
    fi
  done
  return 1
}

mic92- 

pj() { python -mjson.tool } # pretty-print JSON
cj() { curl -sS $@ | pj } # curl JSON
md5() { echo -n $1 | openssl md5 /dev/stdin }
sha1() { echo -n $1 | openssl sha1 /dev/stdin }
sha256() { echo -n $1 | openssl dgst -sha256 /dev/stdin }
sha512() { echo -n $1 | openssl dgst -sha512 /dev/stdin }
rot13() { echo $1 | tr "A-Za-z" "N-ZA-Mn-za-m" }
urlencode() { python2 -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])" $1 }
urldecode() { python2 -c "import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])" $1 }
last_modified() { ls -t $* 2> /dev/null | head -n 1 }
cheat() { command cheat "$@" | less }
ninja(){
  local build_path="$(dirname "$(upfind "build.ninja")")"
  command ninja -C "${build_path:-.}" "$@"
}
make(){
  local build_path="$(dirname "$(upfind "Makefile")")"
  command make -C "${build_path:-.}" "$@"
}
cargo(){
  local build_path="$(dirname "$(upfind "Cargo.toml")")"
  (
    builtin cd "${build_path:-.}" >/dev/null
    command cargo "$@"
  )
}
real-which(){
  realpath "$(command which $@)"
}

mkcd() { mkdir -p "$1" && cd "$1"; }

# make cd accept files
cd() {
  local to="${1:-$HOME}"
  if [ -f "$to" ]; then
    to="$(dirname $to)"
  fi
  builtin cd "$to"
}








home-manager() {
  local profile
  typeset -A profile
  profile[turingmachine]="desktop.nix"
  profile[eddie]="desktop.nix"


  export HOME_MANAGER_CONFIG="${HOME}/.config/nixpkgs/${profile[$HOST]:-common.nix}"
  echo "using $HOME_MANAGER_CONFIG"

  if [[ -n ${commands[home-manager]} ]]; then
    command home-manager "$@"
  else
    if [ ! -d "$HOME/git/nixpkgs" ]; then
      git clone https://github.com/Mic92/nixpkgs/ ~/git/nixpkgs
      (cd ~/git/nixpkgs && git remote add upstream https://github.com/NixOS/nixpkgs.git)
    fi

    nix-shell https://github.com/rycee/home-manager/archive/master.tar.gz -A install
    command home-manager "$@"
  fi
}







modules/xfce4/module.nix

{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.xfce4;

in

{
  options = {

    programs.vscode = {
      settings = mkOption {
        type = types.attrs;
        default = {};
        description = ''
          Configuration written to
          <filename>~/.config/Code/User/settings.json</filename>
        '';
      };
    };
  };

  config = mkIf (cfg.settings != {}) {
    xdg.configFile."Code/User/settings.json".text = ''
      // Generated by Home Manager.
    '' +
    builtins.toJSON cfg.settings;
  };
}












 (lib.mkIf pkgs.stdenv.isLinux {

 (lib.mkIf pkgs.stdenv.isDarwin {






   xsession = {

      windowManager = {
        i3 = pkgs.appConfigs.i3.i3Config { inherit isVmware; };
      };

      initExtra = ''


        ${if isVmware then "sudo ${pkgs.mine.scripts.vmware_login_mount};" else ""}


        # systemctl --user restart random-background


        [ -e /dev/mmcblk0p1 ] && udisksctl mount -b /dev/mmcblk0p1


        systemctl --user start compton.service
        systemctl --user start keybase.service
        systemctl --user start kbfs.service
        ${pkgs.mine.python36Packages.i3-gnome-pomodoro}/bin/pomodoro-client daemon 4 --nagbar &

        xset dpms 90
        xset s off
        xrd -merge ~/.Xresources
        ${pkgs.mine.python36Packages.i3-gnome-pomodoro}/bin/pomodoro-client start && ${pkgs.mine.python36Packages.i3-gnome-pomodoro}/bin/pomodoro-client skip 

      '';
    };
  }




{ pkgs, lib ? pkgs.lib, debug ? false, ... }:

with lib;

mapAttrs' (name: type: {
  name = removeSuffix ".nix" name;
  value = let file = ./. + "/${name}"; in
  lib.callPackageWith (pkgs // {
    inherit debug;
  }) file {};
}) (filterAttrs (name: type:
  (type == "directory" && builtins.pathExists "${toString ./.}/${name}/default.nix") ||
  (type == "regular" && hasSuffix ".nix" name && ! (name == "default.nix") && ! (name == "overlays.nix"))
) (builtins.readDir ./.))
This means that a file named ./foobarDirectory/default.nix will be added to the resulting object under the attribute name of foobarDirectory, and a file that is sibling to this default.nix file named ./foobarFilename.nix becomes the attribue foobarFilename. This helps to quickly construct a tree of packages without a lot of boilerplate import or callPackage method calls.






GC_INITIAL_HEAP_SIZE=4000


If Nix has been configured to use the Boehm garbage collector, this variable sets the initial size of the heap in bytes. It defaults to 384 MiB. Setting it to a low value reduces memory consumption, but will increase runtime due to the overhead of garbage collection.












TODO xfce-settings via home-manager

https://github.com/rycee/home-manager/blob/07c6b8521c0ec952745832021c9c87a2476d800e/modules/misc/dconf.nix


{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.dconf;
  dag = config.lib.dag;

  toDconfIni = generators.toINI { mkKeyValue = mkIniKeyValue; };

  mkIniKeyValue = key: value:
    let
      tweakVal = v:
        if isString v then "'${v}'"
        else if isList v then "[" + concatStringsSep "," (map tweakVal v) + "]"
        else if isBool v then (if v then "true" else "false")
        else toString v;
    in
      "${key}=${tweakVal value}";

  primitive = with types; either bool (either int str);

in

{
  meta.maintainers = [ maintainers.gnidorah maintainers.rycee ];

  options = {
    dconf.settings = mkOption {
      type = with types;
        attrsOf (attrsOf (either primitive (listOf primitive)));
      default = {};
      example = literalExample ''
        {
          "org/gnome/calculator" = {
            button-mode = "programming";
            show-thousands = true;
            base = 10;
            word-size = 64;
          };
        }
      '';
      description = ''
        Settings to write to the dconf configuration system.
      '';
    };
  };

  config = mkIf (cfg.settings != {}) {
    systemd.user.services.dconf-settings =
      let
        iniFile = pkgs.writeText "hm-dconf.ini" (toDconfIni cfg.settings);
      in
        {
          Install = {
            WantedBy = [ "graphical-session-pre.target" ];
          };

          Unit = {
            Description = "Load dconf settings";
          };

          Service = {
            Type = "oneshot";
            ExecStart = pkgs.writeScript "hm-dconf" ''
              #!${pkgs.stdenv.shell}

              ${pkgs.gnome3.dconf}/bin/dconf load / < ${iniFile}
            '';
          };
        };
  };
}




XFCE4 XML SETTINGS:

Keyboard shortcuts are stored in ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml









# xrandr only works under X11 (not Wayland)

[ "$XDG_SESSION_TYPE" = x11 ]

# Adding xrandr commands to startup can be tricky; sometimes they break if they are run too early, before the desktop is fully loaded.

sleep 15 && 
 

# If an external monitor is connected, place it with xrandr
# External output may be "VGA" or "VGA-0" or "DVI-0" or "TMDS-1":









































edit the ~/.config/xfce4/panel/xkb-plugin-##.rc and add a new line or something and it works for some sessions. Another temporary fix may be what #31 suggests

1. Set the desired options in the plugin
2. Copy the ~/.config/xfce4/panel/xkb-plugin-##.rc to some other file e.g. ~/.config/xfce4/panel/goodxkb.rc
3. Add this command to a startup job:

     sh -c "cp ~/.config/xfce4/panel/goodxkb.rc ~/.config/xfce4/panel/xkb-plugin-##.rc && pkill xkb"
    (change the ## to your number)
The pkill part is crucial to reload the plugin and its config.



Open the file $HOME/.config/xfce4/xfconf/xfce-perchannel-xml/keyboard-layout.xml Edit it to look similar to this:



<?xml version="1.0" encoding="UTF-8"?>

<channel name="keyboard-layout" version="1.0">
  <property name="Default" type="empty">
    <property name="XkbDisable" type="bool" value="false"/>
    <property name="XkbLayout" type="string" value="us,fr,ro"/>
    <property name="XkbVariant" type="string" value=",,std"/>
  </property>
</channel>

Open the file $HOME/.config/xfce4/panel/xkb-plugin-##.rc (replace ## with appropriate number). Edit it to look similar to this:

TODO

Open the file /etc/default/keyboard (as root)

Edit it accordingly:

XKBMODEL="pc105"
XKBLAYOUT="us,fr,ro"
XKBVARIANT=",,std"
XKBOPTIONS="grp:alt_shift_toggle"



XKBLAYOUT="gb,epo,de,ru"
XKBVARIANT=",,,phonetic"
XKBOPTIONS="grp:alt_caps_toggle"


In the above example, the phonetic version of the Russian keyboard is being used, which is defined by the XKBVARIANT. The three commas are in front of the word "phonetic" as they tell the system that no variant is required for the three other preceding languages.










