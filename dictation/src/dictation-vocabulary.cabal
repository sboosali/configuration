cabal-version:       2.2

                     -- ^ « v2.2 » introduced:
                     --
                     --   * « common » stanzas;
                     --   * the « elif » keyword;
                     --

build-type:          Simple

--------------------------------------------------

name:                dictation-vocabulary
version:             0.0.0
                     -- ^ ❲ A.B.C.D ❳:
                     --
                     -- • ❲ A.B ❳ — the MajorVersion
                     -- • ❲ C ❳   — the MinorVersion
                     -- • ❲ D ❳   — a PatchVersion

-- x-revision:          1

--------------------------------------------------
-- Description -----------------------------------
--------------------------------------------------

synopsis: Parse Haskell files for dictation vocabulary

category: Dictation

--------------------------------------------------

description: Parse Haskell files for dictation vocabulary.
             .
             .
             .

--------------------------------------------------

author:              Sam Boosalis
maintainer:          Sam Boosalis <samboosalis@gmail.com>

--------------------------------------------------
-- Portability -----------------------------------
--------------------------------------------------

stability: provisional

--------------------------------------------------

tested-with: GHC   == 8.6.4

--------------------------------------------------
-- Licensing -------------------------------------
--------------------------------------------------

license:             GPL-3.0-or-later
license-file:        LICENSE
copyright:           2019 Sam Boosalis

--------------------------------------------------
-- (Non-Code) Files ------------------------------
--------------------------------------------------

extra-source-files: LICENSE

                    README.md
                    CHANGELOG.md

                   -- CONTRIBUTING.md

  --TODO: how to include project files (parent directory) in package?
  --
  --                 ../Makefile
  --                 ../shell.nix
  --                 ../nix/**/*.nix
  --                 ../nix/**/*.json
  --                 ../.gitignore

  --TODO: ./share/**/

  -- share/man/*.man
  -- share/info/
  -- share/bash-completion/
  -- share/doc/
  -- share/elisp/*.el
  -- share//

--------------------------------------------------

data-dir: data

data-files: golden/*.txt
                -- TODO golden/**/*.txt
          , golden/*.example

--------------------------------------------------

--TODO add images
-- extra-doc-files: docs/

--------------------------------------------------
-- Repository ------------------------------------
--------------------------------------------------

homepage:    https://github.com/sboosali/__Repository__#readme
bug-reports: https://github.com/sboosali/__Repository__/issues

--------------------------------------------------

source-repository head
  type:     git
  location: git://github.com/sboosali/__Repository__.git
  subdir:   xxx-package-directory-xxx

--------------------------------------------------

-- source-repository this
--   type:     git
--   location: https://github.com/sboosali/__Repository__/tree/v0.1.0
--   subdir:   xxx-package-directory-xxx

--------------------------------------------------
-- Flags -----------------------------------------
--------------------------------------------------

flag develop

  default:     False

  description: Exposed internals and/or dynamic typechecking (for development).

  manual:      True

--------------------------------------------------

flag static

  default:     False

  description: Both « -fexecutable-static » and « -flibrary-static ».

  manual:      True

--------------------------------------------------

flag executable-static

  default:     False

  description: Build a statically-linked executable (NOTE you should also, via « ./nix/static.nix », provision an environment with « musl » and other statically-linkable C Libraries.)

  manual:      True

--------------------------------------------------

flag library-static

  default:     False

  description: Build statically-linked haskell libraries.

  manual:      True

--------------------------------------------------

-- flag ...
--   default:     False
--   description: Enable ...
--   manual:      True

--------------------------------------------------
-- Common Stanzas --------------------------------
--------------------------------------------------

common Haskell2020Library

 -----------------------------
 --TODO cross-platform template...

 -- if   os(linux)
 -- --   linux-only:
 -- --   ...
 -- elif os(windows)
 -- --   windows-only:
 -- --   ...
 -- elif os(darwin)
 -- --   mac-only:
 -- --   ...

 -- -- ^ See « System.Info.os ».
 -- -- ^ NOTE « os(windows) » canonicalizes « os(mingw32) », « os(cygwin32) », etc.

 -----------------------------
 --TODO cross-platform template...

 -- if   arch(x86_64)
 -- --   64-bit-only:
 -- --   ...
 -- elif arch(i386)
 -- --   32-bit-only:
 -- --   ...

 -- -- ^ See « System.Info.arch ».

 -----------------------------

 default-language: Haskell2010

 -----------------------------

 build-depends: base >=4.10 && <5

 -----------------------------

 -- include-dirs:     include
 -- includes:         HsSbooMacros.h
 -- install-includes: HsSbooMacros.h

 -----------------------------

 ghc-options:

  --------------------
  -- warning groups
  --------------------

             -Wall

  --------------------
  -- disabled warnings
  --------------------

  --------------------
  -- enabled warnings
  --------------------

             -fwarn-name-shadowing
             -fwarn-tabs

  --------------------
  -- (miscellaneous warnings)
  --------------------

  -- raise a warning into an error
  -- -Werror=missing-fields

 -----------------------------

 if flag(static) || flag(library-static)
    ghc-options: -staticlib

 -----------------------------

 if impl(ghc >= 7.10)
    ghc-options:

        --------------------
        -- disabled warnings
        --------------------

                -fno-warn-unticked-promoted-constructors
                -- ^ NOTE « -fno-warn-... » is the old style,
                --        « -Wno-... » is the new style.

 -----------------------------

 if impl(ghc >= 8.0)
    ghc-options:

        --------------------
        -- warning groups
        --------------------

                -Wcompat

        --------------------
        -- disabled warnings
        --------------------

                -Wno-unticked-promoted-constructors
         --TODO -fno-warn-redundant-constraints

        --------------------
        -- enabled warnings
        --------------------

                -Wnoncanonical-monad-instances
                -Wnoncanonical-monadfail-instances

                -Wincomplete-record-updates
                -Wincomplete-uni-patterns

                -Wmissing-methods
                -Widentities

                -- -Wmissing-exported-signatures
                -- -Whi-shadowing

        --------------------

                -Wtyped-holes

 -----------------------------

 if flag(develop)
 
    cpp-options: -DDEVELOP
                 -- ^ Define the « DEVELOP » symbol for CPP.

 -----------------------------

 if flag(develop) && impl(ghc >= 8.0)
 
    ghc-options: -fdefer-typed-holes
                 -- ^ Use `typed-holes`, not `undefined`, during development.

 -----------------------------

 if impl(ghc >= 8.2)
    ghc-options:

        --------------------
        -- enabled warnings
        --------------------

                -Wcpp-undef

                -Wmissing-home-modules

                -Wunbanged-strict-patterns

 -----------------------------

 default-extensions:

   --------------------
   -- "controversial"
   --------------------
                    NoImplicitPrelude

   --------------------
   -- `deriving`
   --------------------
                    AutoDeriveTypeable
                    DeriveDataTypeable
                    DeriveGeneric
                    DeriveFunctor
                    DeriveFoldable
                    DeriveTraversable
                    StandaloneDeriving
--TODO

   --------------------
   -- syntax
   --------------------
                    PackageImports
                    LambdaCase
                    EmptyCase
                    TypeOperators
                    PostfixOperators
                    BangPatterns
                    KindSignatures
                    NamedFieldPuns
                    RecordWildCards
                    TupleSections
                    MultiWayIf
                    DoAndIfThenElse
                    EmptyDataDecls
                    InstanceSigs

   --------------------
   -- typeclasses
   --------------------
                    MultiParamTypeClasses
                    FlexibleContexts
                    FlexibleInstances
                    TypeFamilies
                    FunctionalDependencies
                    ConstrainedClassMethods

   --------------------
   -- patterns
   --------------------
                    ViewPatterns
                    PatternSynonyms

   --------------------
   -- (miscellaneous)
   --------------------
                    ScopedTypeVariables

 -----------------------------

 other-extensions:

   --------------------
   -- macros
   --------------------
                  CPP
   --               TemplateHaskell
   --               QuasiQuotes

   --------------------
   -- syntax (of literals)
   --------------------
                  OverloadedStrings
                  OverloadedLists

   --------------------
   -- (miscellaneous)
   --------------------

   -- RebindableSyntax
   -- kinds:
   -- DataKinds ConstraintKinds
   -- harmful to inference:
   -- GADTs RankNTypes
   -- (miscellaneous)

 -----------------------------

 if impl(ghc >= 7.2)

    default-extensions: DeriveLift

 -----------------------------

 if impl(ghc >= 7.10)

    other-extensions: DeriveAnyClass

 -----------------------------

 if impl(ghc >= 8.0)

    default-extensions: DuplicateRecordFields

    other-extensions:   TemplateHaskellQuotes

 -----------------------------

 if impl(ghc >= 8.4)

    default-extensions: DerivingStrategies
                      , DeriveAnyClass
                      , GeneralizedNewtypeDeriving

 -----------------------------

 if impl(ghc >= 8.6)

    default-extensions: StarIsType
                      , BlockArguments

    -- ^ Enabling « StarIsType » is necessary for forwards-compatibility.
    --
    --   Using « :: * -> * » versus « :: Type -> Type » is necessary
    --   for backwards-compatibility.
    --
    --   "Before GHC 8.0: the only way to refer to the kind of lifted types was the * syntax."
    --
    --   See « https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0030-remove-star-kind.rst ».

 -----------------------------

 other-extensions:

   --------------------
   -- macros
   --------------------
                  TemplateHaskell
   -- QuasiQuotes

   --------------------
   -- syntax (of literals)
   --------------------
                  OverloadedStrings
                  OverloadedLists

   --------------------
   -- (miscellaneous)
   --------------------

   -- RebindableSyntax
   -- kinds:
   -- DataKinds ConstraintKinds
   -- harmful to inference:
   -- GADTs RankNTypes
   -- (miscellaneous)

--------------------------------------------------

common Haskell2020Program

 import: Haskell2020Library

 -----------------------------

 ghc-options:

   --------------------
   -- Compilation -----
   --------------------

             -O2

   --------------------
   -- Runtime ---------
   --------------------

             -threaded
             -rtsopts -with-rtsopts=-N             

   --------------------
   -- Warnings --------
   --------------------

             -Wno-missing-signatures
             -fno-warn-type-defaults

 -----------------------------

 if flag(static) || flag(executable-static)
    ghc-options: -static -optl=-static

 -----------------------------

--------------------------------------------------
-- Executables -----------------------------------
--------------------------------------------------

-- See « Program.Language.Haskell.Dictation.Vocabulary.Main ».

executable sboo-dictation-vocabulary-haskell

  import: Haskell2020Program

  ----------------------------

  hs-source-dirs: .

  main-is: dictation-vocabulary.hs

  other-modules: 

  ----------------------------

  build-depends: spiros               ^>= 0.3
               , text                 
               , split                
               , optparse-applicative 
               , haskell-src-exts      

--------------------------------------------------