----------------------------------------
overlays

type Overlay a = (a -> a -> a)

type Overlay = (Dict -> Dict -> Dict)
-- "Endo Endo Dict"
 
identityOverlay :: Overlay
identityOverlay self super = {}

----

overlays.nix is a list of overlays

each overlays/_.nix can be an overlay

----

The first argument (self) corresponds to the final package set. You should use this set for the dependencies of all packages specified in your overlay. 

The second argument (super) corresponds to the result of the evaluation of the previous stages of Nixpkgs. It does not contain any of the packages added by the current overlay, nor any of the following overlays.

----

----------------------------------------
haskell

let
  haskellPackages = (import <nixpkgs> {}).haskellPackages;
  upgradedTurtle = haskellPackages.callHackage "turtle" "1.3.1" {};
in
haskellPackages.callPackage ./my-own-haskell-package.nix {
  turtle = upgradedTurtle;
}

callHackage relies on all-cabal-hashes which is frozen with a nixpkgs release. 


turtle = haskellPackages.callCabal2nix "turtle" (fetchFromGitHub {
  owner  = "Gabriel439";
  repo   = "Haskell-Turtle-Library";
  rev    = "f22ad5c35f910b11b833bbbbb08df212d5fde06c";
  sha256 = "...";
}) {};


{ nixpkgs ? import <nixpkgs> {}, compiler ? "default", withHoogle ? true }:

let

  inherit (nixpkgs) pkgs;

  f = import ./default.nix;

  packageSet = (
    if compiler == "default"
      then  pkgs.haskellPackages
      else  pkgs.haskell.packages.${compiler}
  );

  haskellPackages = (
    if withHoogle
      then  packageSet.override {
              overrides = (self: super:
                {
                  ghc = super.ghc // { withPackages = super.ghc.withHoogle; };
                  ghcWithPackages = self.ghc.withPackages;
                }
              );
            }
      else  packageSet
  );

  drv = haskellPackages.callPackage f {};

in

  if pkgs.lib.inNixShell then drv.env else drv

It's designed to import a default.nix produced by cabal2nix . > default.nix, without needing to manually update anything other than the cabal file. I suspect I'd do something cleaner with overlays if I was writing it now (I haven't used this particular setup for a little while).

The key idea is to override ghcWithPackages to actually be ghcWithHoogle, so that when the haskell helper nix code produces the env attribute containing a suitable build environment, it pulls in a hoogle database as well as just the libraries.









----------------------------------------

# ln -s <nixpkgs> ~/.nix-defexpr 
# don't need to use -f

----------------------------------------

This nix expression requires that cudnn-8.0-linux-x64-v6.0.tgz is already part of the store.
Register yourself to NVIDIA Accelerated Computing Developer Program, retrieve the cuDNN library
at https://developer.nvidia.com/cudnn, and run the following command in the download directory:
nix-prefetch-url file://cudnn-8.0-linux-x64-v6.0.tgz

Register yourself to NVIDIA Accelerated Computing Developer Program
retrieve the cuDNN library at https://developer.nvidia.com/cudnn
nix-prefetch-url file://cudnn-8.0-linux-x64-v6.0.tgz

----------------------------------------
google-chrome v chromium

svox-2017-07-18
speech-dispatcher-0.8.8
espeak-ng-1.49.2
pcaudiolib-2016-07-19
sonic-2016-03-01

pcaudiolib
    Provides a C API to different audio devices

sonic
    Simple library to speed up or slow down speech

speech-dispatcher
    Common interface to speech synthesis

eSpeak NG 
Text-to-Speech

svox
Automated Speech Recognition (ASR), Text-to-Speech (TTS) and Speech Dialog systems
an embedded speech technology company acquired by Nuance 
customers mostly being manufacturers and system integrators in automotive and mobile device industries.


----------------------------------------
