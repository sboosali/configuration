### -*- mode: shell-script; -*-

#------------------------------------------------#

# this file is "impure";
# it has effects like overwriting environment variables, spawning daemons, calling `shopt`, etc

# guard executions on whether the executable's present
# 
# if [ -x "$(command -v EXECUTABLE)" ]; then
#  
# fi

#------------------------------------------------#
# Nix -------------------------------------------#
#------------------------------------------------#

# Settings for « nix » and « nixpkgs ».

#------------------------------------------------#

export NIX_PATH="nixpkgs=$HOME/nixpkgs:$NIX_PATH"

#TODO# export NIX_PATH="nixpkgs=$HOME/nixpkgs:$NIX_PATH"

# ^ my fork of `nixpkgs`
# append to the front (not the back) of the path-list to shadow the default locations (nixpkgs "channels" are weird).
# i.e. the angle-path "nix eval "<nixpkgs>" should (?) evaluate to a `nix-store` path that's equivalent "$HOME/nixpkgs/".

#export NIX_PATH="nixpkgs=$HOME/nixpkgs:nixpkgs=$HOME/.nix-defexpr/channels/nixpkgs"

#------------------------------------------------#
# Imports ---------------------------------------#
#------------------------------------------------#

export CONFIGURATION="$HOME/configuration"

# ^ location of my personal configuration ("dotfiles").
# it's a single subdirectory to simplify version-control, including of this file itself
# (though this complicates synchronization", i.e. symlinking things (`ln -sf`) all across the filesystem.)

#------------------------------------------------#

if [ -f .git-prompt.sh ]; then
  # shellcheck disable=SC1091 
  source .git-prompt.sh
fi

#------------------------------------------------#
# Initialization --------------------------------#
#------------------------------------------------#

# Initialization (set variables or clear them).

#------------------------------------------------#

PROMPT_COMMAND=""

#PROMPT_COMMAND=""
#PROMPT_COMMAND="${PROMPT_COMMAND:+${PROMPT_COMMAND} ;} ...TODO..."

#------------------------------------------------#
#  Bash Completion ------------------------------#
#------------------------------------------------#

# « source » bash-completion scripts.

#------------------------------------------------#

COMPLETION_FILES=( )

#------------------------------------------------#

# don't wildcard the larger directory, whitelist instead.
#NOTE too many errors from the completion-scripts of hundreds of random executable's.

##COMPLETION_SCRIPTS=~/.nix-profile/share/bash-completion/completions/*

COMPLETION_DIRECTORIES=( )
COMPLETION_DIRECTORIES+=( ~/.nix-profile/share/bash-completion/completions )

#------------------------------------------------#

COMPLETED_PROGRAMS=( )

COMPLETED_PROGRAMS+=( "cabal2nix" )
COMPLETED_PROGRAMS+=( "convert" )
COMPLETED_PROGRAMS+=( "curl" )
COMPLETED_PROGRAMS+=( "dconf" )
COMPLETED_PROGRAMS+=( "desktop-file-validate" )
COMPLETED_PROGRAMS+=( "dot" )
COMPLETED_PROGRAMS+=( "feh" )
COMPLETED_PROGRAMS+=( "find" )
COMPLETED_PROGRAMS+=( "gcc" )
COMPLETED_PROGRAMS+=( "gzip" )
COMPLETED_PROGRAMS+=( "htop" )
COMPLETED_PROGRAMS+=( "iconv" )
COMPLETED_PROGRAMS+=( "info" )
COMPLETED_PROGRAMS+=( "kill" )
COMPLETED_PROGRAMS+=( "man" )
COMPLETED_PROGRAMS+=( "nano" )
COMPLETED_PROGRAMS+=( "nix" )
COMPLETED_PROGRAMS+=( "nix-build" )
COMPLETED_PROGRAMS+=( "nix-channel" )
COMPLETED_PROGRAMS+=( "nix-collect-garbage" )
COMPLETED_PROGRAMS+=( "nix-copy-closure" )
COMPLETED_PROGRAMS+=( "nix-instantiate" )
COMPLETED_PROGRAMS+=( "nix-shell" )
COMPLETED_PROGRAMS+=( "pgrep" )
COMPLETED_PROGRAMS+=( "rg" )
COMPLETED_PROGRAMS+=( "rsync" )
COMPLETED_PROGRAMS+=( "scp" )
COMPLETED_PROGRAMS+=( "sqlite" )
COMPLETED_PROGRAMS+=( "ssh" )
COMPLETED_PROGRAMS+=( "ssh-add" )
COMPLETED_PROGRAMS+=( "ssh-keygen" )
COMPLETED_PROGRAMS+=( "stack" )
COMPLETED_PROGRAMS+=( "sudo" )
COMPLETED_PROGRAMS+=( "tar" )
COMPLETED_PROGRAMS+=( "tput" )
COMPLETED_PROGRAMS+=( "wget" )
COMPLETED_PROGRAMS+=( "xmodmap" )
COMPLETED_PROGRAMS+=( "xrandr" )

# COMPLETED_PROGRAMS+=( "7z" )
# COMPLETED_PROGRAMS+=( "autoconf" )
# COMPLETED_PROGRAMS+=( "c++" )
# COMPLETED_PROGRAMS+=( "clang" )
# COMPLETED_PROGRAMS+=( "dd" )
# COMPLETED_PROGRAMS+=( "dd" )
# COMPLETED_PROGRAMS+=( "dpkg" )
# COMPLETED_PROGRAMS+=( "dpkg-deb" )
# COMPLETED_PROGRAMS+=( "dpkg-query" )
# COMPLETED_PROGRAMS+=( "dpkg-reconfigure" )
# COMPLETED_PROGRAMS+=( "dpkg-source" )
# COMPLETED_PROGRAMS+=( "evince" )
# COMPLETED_PROGRAMS+=( "git-annex" )
# COMPLETED_PROGRAMS+=( "gpg" )
# COMPLETED_PROGRAMS+=( "gpg2" )
# COMPLETED_PROGRAMS+=( "gzip" )
# COMPLETED_PROGRAMS+=( "jar" )
# COMPLETED_PROGRAMS+=( "java" )
# COMPLETED_PROGRAMS+=( "javac" )
# COMPLETED_PROGRAMS+=( "mount" )
# COMPLETED_PROGRAMS+=( "mysql" )
# COMPLETED_PROGRAMS+=( "nix-env" )
# COMPLETED_PROGRAMS+=( "pinfo" )
# COMPLETED_PROGRAMS+=( "ping" )
# COMPLETED_PROGRAMS+=( "ping6" )
# COMPLETED_PROGRAMS+=( "sysctl" )
# COMPLETED_PROGRAMS+=( "timeout" )
# COMPLETED_PROGRAMS+=( "vi" )
# COMPLETED_PROGRAMS+=( "xgamma" )
# COMPLETED_PROGRAMS+=( "xrdb" )

#COMPLETED_PROGRAMS+=( "" )

# COMPLETED_PROGRAMS+=( "find" )
# COMPLETED_PROGRAMS+=( "pkill" )
# COMPLETED_PROGRAMS+=( "wmctrl" )

#TODO
# cabal doesn't exist
# scp errors

##################################################

for CompletionFile in "${COMPLETION_FILES[@]}"
do
    # shellcheck source=/dev/null
    source "${CompletionFile}" || true
done

#------------------------------------------------#

for CompletionFile in ~/.nix-profile/etc/bash_completion.d/*
do
    # shellcheck source=/dev/null
    source "${CompletionFile}" || true
done

#------------------------------------------------#

# local CompletionDirectory
# local CompletionFile
# local CompletionName

for CompletedProgram in "${COMPLETED_PROGRAMS[@]}"
do

    for CompletionDirectory in "${COMPLETION_DIRECTORIES[@]}"
    do

        CompletionFile="${CompletionDirectory}/${CompletedProgram}"

        if   [[ -e "${CompletionFile}" ]]
        then
            # shellcheck source=/dev/null
            source "${CompletionFile}" || true

            break
            # ^ « break » from « CompletionDirectory » loop
            #   which continues to the next iteration of « CompletedProgram » loop.
            #   thus, only « source » the first completion script (for any given program to-be-completed).

        elif [[ -e "${CompletionFile}.bash" ]]
             # try the file itself and the file with extensions (e.g. « .bash ») suffixed.
        then
            # shellcheck source=/dev/null
            source "${CompletionFile}.bash" || true

            break
            # try the file itself and the file with extensions (e.g. « .bash ») suffixed.
        fi

    done

done

#------------------------------------------------#

if [ -x "$(command -v pandoc)" ]
then
    eval "$(pandoc --bash-completion)" || true
fi

#------------------------------------------------#

### {sudo,find,ls,export,declare,git,ghc,ghcjs,cabal,clang,gcc,g++,ssh,ssh-add,ssh-keygen,xmodmap,xrandr,xbindkeys,dconf,curl,ping,dd,tar,gzip,7z,rsync,htop,pkill,pgrep,pandoc,iconv,dot,nano,emacs,emacsclient,feh,scp,VBoxManage}

#------------------------------------------------#

# $ source "$(dirname $(readlink $(which git)))/"../share/git/contrib/completion/git-completion.bash || true
# ^ custom subdirectory, for `git`.
#
# e.g. /nix/store/*git*/bin/../share/git/contrib/completion/git-completion.bash
# i.e.
# e.g. /nix/store/*git*/share/git/contrib/completion/git-completion.bash
# i.e.
# e.g. _/share/git/contrib/completion/git-completion.bash
#
# e.g. ~/.nix-profile/share/bash-completion/completions/ghc
#

########################################
## EDITOR SETTINGS

# NOTE
# "The editor used to edit the commit log message will be chosen
#    from the GIT_EDITOR environment variable, the core.editor configuration
#    variable, the VISUAL environment variable, or the EDITOR environment
#    variable (in that order)."

#TODO
# wrapper that picks gui-or-no given env-var

if [ -x "$(command -v emacsclient)" ]
then
    export GIT_EDITOR=emacsclient
    #export VISUAL=emacsclient
    export EDITOR=emacsclient
    export ALTERNATE_EDITOR=nano
    # ^ for when an Emacs Server isn't running 
    #   (or available, if i'm messing with my `init.el`).
fi

########################################
## MISCELLANEOUS SETTINGS 

########################################
## PATH SETTINGS

# TODO rm (see ../home-manager/nix/bash/environment-variables.nix):
#
# # set PATH so it includes user's private bin if it exists
# if [ -d "$HOME/bin" ] ; then
#     export PATH="$HOME/bin:$PATH"
# fi
#
# # `stack` installs executables here
# if [ -d "$HOME/.local/bin" ] ; then
#     export PATH="$HOME/.local/bin:$PATH"
# fi

# # the relative binary directory for nix-build:
# #
# # WARNING a relative path, for a more convenient `nix-build`
# export PATH=./result/bin:$PATH

########################################
## HISTORY SETTINGS

#--------------------------------------#

# don't put duplicate lines or lines starting with space in the history.
# HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=-1                       # infinite # orig 1000
export HISTFILESIZE=-1                   # infinite # orig 2000
export HISTFILE=~/.bash_history_eternal  # any `bash --norc` will truncate the default history file

#--------------------------------------#

sboo-prompt-command-history() {

    history -a; history -r;

}

SBOO_PROMPT_COMMAND_HISTORY="{ [ -x sboo-prompt-command-history ] && sboo-prompt-command-history; }"

export PROMPT_COMMAND="$SBOO_PROMPT_COMMAND_HISTORY; $PROMPT_COMMAND"

#--------------------------------------#

# PROMPT_COMMAND="history -a; history -c; history -r; ${PROMPT_COMMAND}"
# export HISTFILESIZE=HISTSIZE=

# NOTE
# the PROMPT_COMMAND is run before each prompt is shown, and before PS1 is computed
# history -a write history to HISTFILE after each command (the default is only on exit, it's kept in memory until)
# history -r read current history in HISTORY after each command (to be available to the current shell)
# history -c clears the current shell's current history

# PROMPT_COMMAND="${PROMPT_COMMAND:+${PROMPT_COMMAND} ;}history -a; history -c; history -r;"
# make sure PROMPT_COMMAND isn't null (why?)

#--------------------------------------#

#------------------------------------------------#
# Ubuntu Bashrc ---------------------------------#
#------------------------------------------------#

# default settings from Ubuntu BashRC.

#------------------------------------------------#

# check the window size after each command and, if necessary,
# update the values of « $LINES » and « $COLUMNS ».

shopt -s checkwinsize

#------------------------------------------------#

# If set, the pattern « ** » used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.

shopt -s globstar

#------------------------------------------------#

# make less more friendly for non-text input files, see « lesspipe(1) »

#TODO
# [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

#------------------------------------------------#

# set variable identifying the chroot you work in (used in the prompt below)

if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

#------------------------------------------------#

# the focus in a terminal window
# should be on the output of commands, not on the prompt

# # if this is an xterm set the title to user@host:dir
# case "$TERM" in
# xterm*|rxvt*)
#     PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#     ;;
# *)
#     ;;
# esac

#------------------------------------------------#

# enable color support of ls and also add handy aliases:

if [ -x /usr/bin/dircolors ]; then

    if   test -r ~/.dircolors
    then eval "$(dircolors -b ~/.dircolors)"
    else eval "$(dircolors -b)"
    fi

    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

#------------------------------------------------#

# colored GCC warnings and errors:

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

#------------------------------------------------#

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    # shellcheck disable=SC1091,SC1094
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    # shellcheck disable=SC1091
    . /etc/bash_completion
  fi
fi

#------------------------------------------------#

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

#------------------------------------------------#
# Colors ----------------------------------------#
#------------------------------------------------#

# tput -T"${TERM}" longname

if   tput longname >/dev/null 2>&1
     # Whether « $TERM » is a known terminal.
     # TODO check whether it has color capabilities
then

    # Colors for the Git Prompt:

    color_reset="$(tput sgr0)"
    color_bold="$(tput bold)"

    color_fg_black="$(tput setaf 0)"
    color_fg_red="$(tput setaf 1)"
    color_fg_green="$(tput setaf 2)"
    color_fg_yellow="$(tput setaf 3)"
    color_fg_blue="$(tput setaf 4)"
    color_fg_magenta="$(tput setaf 5)"
    color_fg_cyan="$(tput setaf 6)"
    color_fg_white="$(tput setaf 7)"

    # color_fg_green_bold="$(tput setaf 2)$(tput bold)"
    # color_fg_red_bold="$(tput setaf 1)$(tput bold)"
    # color_fg_white_bold="$(tput setaf 7)$(tput bold)"
    # color_fg_yellow_bold="$(tput setaf 3)$(tput bold)"

    # reset="$(tput sgr0)"

else
    # ^ the guards fix « tput: unknown terminal "emacs-grep" ».

    color_reset=
    color_bold=

    color_fg_black=
    color_fg_red=
    color_fg_green=
    color_fg_yellow=
    color_fg_blue=
    color_fg_magenta=
    color_fg_cyan=
    color_fg_white=

    # color_fg_green_bold=
    # color_fg_boldred=
    # color_fg_boldwhite=
    # color_fg_boldyellow=

fi

#------------------------------------------------#

export color_reset
export color_bold

export color_fg_black
export color_fg_red
export color_fg_green
export color_fg_yellow
export color_fg_blue
export color_fg_magenta
export color_fg_cyan
export color_fg_white

#------------------------------------------------#
# Desktop Environment ---------------------------#
#------------------------------------------------#

# Desktop-Environment(-Specific) Settings 

#------------------------------------------------#

sboo-desktop-settings-for-only-xubuntu() {

    return;

}

#------------------------------------------------#

#sboo-desktop-settings-for-only-plasma() { return; }

#sboo-desktop-settings-for-only-gnome() { return; }

#sboo-desktop-settings-for-only-ubuntu() { return; }

sboo-desktop-settings-for-only-unknown() { return; }

#------------------------------------------------#

sboo-desktop-settings() {

    case "$DESKTOP_SESSION" in
        # ^ for conditioning on the current desktop environment.
        # failable: e.g. "default" or "ubuntu" isn't informative.

        "xubuntu")
            sboo-desktop-settings-for-only-xubuntu
            ;;

        "plasma")
#            sboo-desktop-settings-for-only-plasma
            ;;
        
        "gnome")
#            sboo-desktop-settings-for-only-gnome
            ;;

        "ubuntu")
#            sboo-desktop-settings-for-only-ubuntu
            ;;

        *)
            sboo-desktop-settings-for-only-unknown
            ;;
    esac

}

##################################################

sboo-desktop-settings

#------------------------------------------------#
# Prompt ----------------------------------------#
#------------------------------------------------#

# https://stackoverflow.com/a/26759734/1337806

sboo-set-branch() {

    if [ -x "$(command -v __git_ps1)" ]
       # ^ if present and executable
    then
        # shellcheck disable=SC2034
        BRANCH="$(__git_ps1 \(%s\))"
        # echo $BRANCH
    fi

}

# ^ unless empty or unset
# shellcheck disable=SC2154 
# if [ -z "$__git_ps1" ]; then

#--------------------------------------#

sboo-prompt-command-git() {

    sboo-set-branch

}

#--------------------------------------#

SBOO_PROMPT_COMMAND_GIT="{ [ -x sboo-prompt-command-git ] && sboo-prompt-command-git; }"

#--------------------------------------#

export PROMPT_COMMAND="$SBOO_PROMPT_COMMAND_GIT; $PROMPT_COMMAND"

#--------------------------------------#

# function sboo-get-branch {
#  # unless empty or unset
#  if [ -z "$__git_ps1" ]; then
#    "$(__git_ps1 \(%s\))"
#  fi
# }

##################################################
# Simple Prompt:
#------------------------------------------------#

# PS1="\u@\h: \[${color_bold}\]\w\[${color_reset}\] \$ "

#------------------------------------------------#

##################################################
# Clean Prompt:
#------------------------------------------------#

SBOO_DEFAULT_USER="sboo"

SBOO_DEFAULT_HOSTNAME="SpirOS"

SBOO_DEFAULT_GIT_BRANCHNAME="master"

#------------------------------------------------#

sboo-ps1-user-host() {

    local U
    local H
    local UH

    U="${USER}"
    H="${HOSTNAME}"

    if [ "${U}" == "${SBOO_DEFAULT_USER}" ]
    then
        U=
    fi
    
    if [ "${H}" == "${SBOO_DEFAULT_HOSTNAME}" ]
    then
        H=
    fi

    if  [ -z "${U}" ] && [ -z "${H}" ]
    then
        UH=
    else
        UH="${U}@${H}"
    fi

    echo "${UH}"

}

#------------------------------------------------#

#TODO...
# YELLOW="\\[$(tput setaf 3)\\]"
# RESET="\\[$(tput sgr0)\\]"
# PS1="\\n\${BRANCH}${YELLOW}\\w${RESET}\$ "

##################################################
# Git Prompt:
#------------------------------------------------#

alias sboo-ps1-git-branch-name="git branch 2>/dev/null | sed -ne 's/^* \(.*\)/ (\1\)/p'"

#------------------------------------------------#

# shellcheck disable=SC2016
SBOO_GIT_STATUS='$(sboo-ps1-git-branch-name)'

# shellcheck disable=SC2016
SBOO_USER_HOST_STATUS='$(sboo-ps1-user-host)'

#------------------------------------------------#

PS1="${SBOO_USER_HOST_STATUS}\[${color_fg_green}\]\w\[${color_reset}\]\[${color_fg_blue}\]${SBOO_GIT_STATUS}\[${color_reset}\] \$ "

#------------------------------------------------#
# Direnv ----------------------------------------#
#------------------------------------------------#

###TODO eval "$(direnv hook bash)"
### wrecked my Emacs PATHs.

# ^
# 
# > Ensure `direnv` appears *after* other shell extensions that manipulate the prompt, e.g. `git-prompt`.
#
# https://direnv.net/

#------------------------------------------------#
# Notes -----------------------------------------#
#------------------------------------------------#

# this sets the prompt to show the current directory
# later settings should preserve this as an infix:
#     PS1="...${PS1}..."

# # GREEN="\\[$(tput setaf 2)\\]"
# YELLOW="\\[$(tput setaf 3)\\]"
# RESET="\\[$(tput sgr0)\\]"
# PS1="\\n\${BRANCH}${YELLOW}\\w${RESET}\$ "

# ^ ERROR(/Warning): « "tput unknown terminal" ».
#

# PS1="\n(${GREEN}\u${RESET})${YELLOW}\w${RESET}\$ "
# PS1="\n(${GREEN}\u${RESET})${GREEN}\w${RESET}\$ "
# export PS1="\[\e]0;\w\a\]$PS1"

#NOTE
# under a darkroom'd monitor, yellow is visible while green is faint
# \${BRANCH}, with an escaped "$" via "\${...}, is a delayed substition

# e.g.
# GREEN="\[$(tput setaf 2)\]"
# RESET="\[$(tput sgr0)\]"
# export PS1="\n${GREEN}\w${RESET}\$ "

#NOTE `PROMPT_COMMAND` is faster than `PS1`

# # if this is an xterm, set the title to the `pwd`
# case "$TERM" in
# xterm*|rxvt*)
#     PS1="\[\e]0;\h: \w\a\]$PS1"
#     ;;
# *)
#     ;;
# esac

### (too slow)
# # show current branch when in git repo (or descendent thereof)
# if [ -x "$(command -v git-radar)" ]; then
#   export PS1="\W\$(git-radar --bash --fetch) "
# fi

# NOTE
# `-x FILE` tests if the FILE is executable
# `command` is POSIX, and thus most portable

# NOTE
# requires `git-radar`

#NOTE
  # --fetch  # Fetches your repo asynchronously in the background every 5 mins
  # --bash   # Output prompt using Bash style color characters

# source ~/bin/git-prompt.sh
# PS1='\w$(__git_ps1 " (%s)") \$ '
# PS1="\n$PS1"

#NOTE
#
# function definitions with empty bodies don't work in bash;
# thus, we need a placeholder, like the return keyword or a semicolon.
#

# # shellcheck disable=SC2016
# GIT_STATUS='$(branchname)'
#
# PROMPT_CHAR="\$"
# PS1="\[${color_fg_green}\]\u\[${color_fg_cyan}\]::\[${color_fg_red}\]\h \[${color_fg_cyan}\]{\[${color_fg_white}\].../\W\[${color_fg_cyan}\]}\[${color_reset}\]${GIT_STATUS}\[${color_reset}\] ${PROMPT_CHAR} "
#
# # e.g. « sboo::SpirOS {.../haskell}$ »

# see <https://askubuntu.com/questions/114759/warning-setlocale-lc-all-cannot-change-locale>
#   $ sudo update-locale LC_ALL=en_US # no this may have caused a bug for gnome-terminal.

# TODO rm /usr/games /usr/local/games /snap/bin #LOL Ubuntu

# PARENCLR=$'\001\e[0;36m\002'
# BRANCHCLR=$'\001\e[1;33m\002'
#
# # shellcheck disable=SC2139
# alias branchname="git branch 2>/dev/null | sed -ne 's/^* \(.*\)/ ${PARENCLR}(${BRANCHCLR}\1${PARENCLR}\)/p'"

#------------------------------------------------#
# EOF -------------------------------------------#
#------------------------------------------------#
